<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JSer.info</title>
    <description>JavaScriptの最新情報を紹介する週刊ブログ</description>
    <link>https://jser.info/</link>
    <atom:link href="https://jser.info/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 15 Jan 2017 23:58:27 +0900</pubDate>
    <lastBuildDate>Sun, 15 Jan 2017 23:58:27 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>JSer.info 6周年記念イベントを開催しました</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント&quot;&gt;JSer.info 6周年と300回記念イベント&lt;/a&gt;を開催しました。&lt;/p&gt;

&lt;p&gt;参加して頂いた皆さん、発表して頂いた皆さんありがとうございます。&lt;/p&gt;

&lt;h3 id=&quot;発表内容&quot;&gt;発表内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/jser_info_6years.html&quot;&gt;JSer.info 6周年イベント&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/azu_re&quot;&gt;@azu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/how_to_make_jser_info.html&quot;&gt;JSer.infoの作り方&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/azu_re&quot;&gt;@azu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1N0waGxmspbLyRf6a6hG5oXk77z69YirgW21_Cegxnq0/edit#slide=id.p&quot;&gt;ECMA-402を知ってますか？&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/makoto_kato&quot;&gt;@makoto_kato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/potato4d/2017nian-falsejavascriptto-hurontoendofalsele-simikata-number-jserinfo&quot;&gt;2017年のJavaScriptと フロントエンドの楽しみかた #jserinfo // Speaker Deck&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/potato4d&quot;&gt;@potato4d&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1rwmyRW99N4ZAPM5gyDGjgv0yvJXVATUom6rNxAZrYvQ/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.g1aed898fe2_0_156&quot;&gt;A piece of potential of Cognitive Services&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/ovrmrw&quot;&gt;@ovrmrw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://slides.youchan.org/JSerInfo6th&quot;&gt;Opalのすすめ&lt;/a&gt; - &lt;a href=&quot;https://twitter.com/youchan&quot;&gt;@youchan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;HOW AMP WORKS - &lt;a href=&quot;https://github.com/kishu&quot; title=&quot;kishu&quot;&gt;@kishu&lt;/a&gt; 翻訳: &lt;a href=&quot;https://twitter.com/purewish&quot; title=&quot;@purewish&quot;&gt;@purewish&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;with Many LT&lt;/p&gt;

&lt;p&gt;以下、&lt;a href=&quot;https://paper.dropbox.com/doc/JSer.info-6-4ko0NvdzqpYj5Rt6TvdJi&quot; title=&quot;JSer.info 6周年記念イベント - Paper&quot;&gt;JSer.info 6周年記念イベント - Paper&lt;/a&gt;に書かれた議事録です。&lt;/p&gt;

&lt;p&gt;議事録を取って頂いた&lt;a href=&quot;https://twitter.com/suzuki&quot; title=&quot;@suzuki&quot;&gt;@suzuki&lt;/a&gt;さんありがとうございます。&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;jser.infoについて---azu&quot;&gt;JSer.infoについて - azu&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/jser_info_6years.html&quot;&gt;JSer.info 6周年イベント&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;JSer.info、明日で6周年

&lt;ul&gt;
&lt;li&gt;1000記事/年くらい紹介&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;紹介記事の傾向

&lt;ul&gt;
&lt;li&gt;JSONファイルで管理&lt;/li&gt;
&lt;li&gt;jser/stat-js に入れている&lt;/li&gt;
&lt;li&gt;MIT ライセンス&lt;/li&gt;
&lt;li&gt;このスライド用にダッシュボード作った&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Dashboard のデータ

&lt;ul&gt;
&lt;li&gt;ドメイン別&lt;/li&gt;
&lt;li&gt;GitHub が多い&lt;/li&gt;
&lt;li&gt;リリースノートが書かれる&lt;/li&gt;
&lt;li&gt;ブログ系ドメインが変わってきた

&lt;ul&gt;
&lt;li&gt;はてなダイアリー&lt;/li&gt;
&lt;li&gt;下がってきた&lt;/li&gt;
&lt;li&gt;はてなブログ&lt;/li&gt;
&lt;li&gt;最近は Medium / Qiita が増えてきた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Qiita / Medium

&lt;ul&gt;
&lt;li&gt;Qiita: 日本語圏&lt;/li&gt;
&lt;li&gt;Medium: それ以外の言語圏&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自ドメインに書いている人が減りつつある

&lt;ul&gt;
&lt;li&gt;プラットフォームのほうがコメントなど貰いやすい&lt;/li&gt;
&lt;li&gt;人だけでなくタグでも追えるのがプラットフォーム&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;プラットフォーム以外

&lt;ul&gt;
&lt;li&gt;SNS、SBM、Echo JS&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;情報を投げる場所

&lt;ul&gt;
&lt;li&gt;jser/ping&lt;/li&gt;
&lt;li&gt;URL、説明文などをPOSTできる&lt;/li&gt;
&lt;li&gt;投げると勝手に GitHub Issue が立つ&lt;/li&gt;
&lt;li&gt;pull request を投げるものも作ったが誰も使ってくれなかったので、よりカジュアルなものに&lt;/li&gt;
&lt;li&gt;自分用でも使っている&lt;/li&gt;
&lt;li&gt;lambda でサーバレス（かっこいいな）&lt;/li&gt;
&lt;li&gt;投稿フロー&lt;/li&gt;
&lt;li&gt;投稿タイミング、ある程度数が貯まったらボットが通知&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;韓国語版

&lt;ul&gt;
&lt;li&gt;今日は韓国からゲスト参加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ECMAScript Diary

&lt;ul&gt;
&lt;li&gt;個人の日記&lt;/li&gt;
&lt;li&gt;ECMAScript のみを扱っている&lt;/li&gt;
&lt;li&gt;おそらく唯一の専門サイト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今後

&lt;ul&gt;
&lt;li&gt;週一の記事以外にトピックベースの記事を書いてみたい&lt;/li&gt;
&lt;li&gt;時間コストはかけたくない&lt;/li&gt;
&lt;li&gt;仕組み化が課題
#### Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. pull request少ないのは本当に少ないのか？&lt;/li&gt;
&lt;li&gt;A. 修正はそこそこ。記事の投稿はほとんどなかった。ちょっと面倒臭いフローだった&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;jser.infoの作り方---azu&quot;&gt;JSer.infoの作り方 - azu&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;http://azu.github.io/slide/2017/jser_info/how_to_make_jser_info.html&quot;&gt;JSer.infoの作り方&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;去年のまとめ

&lt;ul&gt;
&lt;li&gt;JavaScript 情報ってなんだっけ？&lt;/li&gt;
&lt;li&gt;コミュニティの問題&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSer.infoの目的

&lt;ul&gt;
&lt;li&gt;整理して発信&lt;/li&gt;
&lt;li&gt;紹介でなく知ってもらう&lt;/li&gt;
&lt;li&gt;継続的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゴール

&lt;ul&gt;
&lt;li&gt;興味ある人に知ってもらう&lt;/li&gt;
&lt;li&gt;現状を正確に伝える&lt;/li&gt;
&lt;li&gt;更新コストを低く&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ワークフロー&lt;/li&gt;
&lt;li&gt;目的を満たすために

&lt;ul&gt;
&lt;li&gt;誤った情報を知らせるのは嫌だ&lt;/li&gt;
&lt;li&gt;文字は人によって感じ方が違う&lt;/li&gt;
&lt;li&gt;誤解を生まないように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;みる、調べる

&lt;ul&gt;
&lt;li&gt;JS 以外でも同じやり方が可能&lt;/li&gt;
&lt;li&gt;見る&lt;/li&gt;
&lt;li&gt;見る、気づく

&lt;ul&gt;
&lt;li&gt;いろいろなところを見る&lt;/li&gt;
&lt;li&gt;自分が見るところを集約&lt;/li&gt;
&lt;li&gt;情報不足、情報過多はうまくいかない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub

&lt;ul&gt;
&lt;li&gt;開発基盤、重要&lt;/li&gt;
&lt;li&gt;ECMAScript の仕様策定も GitHub &lt;/li&gt;
&lt;li&gt;GitHub Notification が崩壊w&lt;/li&gt;
&lt;li&gt;リポジトリを Watch&lt;/li&gt;
&lt;li&gt;Star はもっと気軽にやっている

&lt;ul&gt;
&lt;li&gt;starWatcher&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub を Twitter で見る&lt;/li&gt;
&lt;li&gt;AWS Lamda で Activity を bot で Twitter へ流す&lt;/li&gt;
&lt;li&gt;見逃したくない情報は何度も流れるようにしている&lt;/li&gt;
&lt;li&gt;Twitter + RSS + Pocket とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RSS

&lt;ul&gt;
&lt;li&gt;LDRを使っている&lt;/li&gt;
&lt;li&gt;3213 feeds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ

&lt;ul&gt;
&lt;li&gt;見る&lt;/li&gt;
&lt;li&gt;自分が見るところへ集約&lt;/li&gt;
&lt;li&gt;多すぎる情報を整理する&lt;/li&gt;
&lt;li&gt;調べる&lt;/li&gt;
&lt;li&gt;ググる

&lt;ul&gt;
&lt;li&gt;えいごで検索&lt;/li&gt;
&lt;li&gt;日付で絞る&lt;/li&gt;
&lt;li&gt;URL で検索&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub検索

&lt;ul&gt;
&lt;li&gt;検索演算子を活用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;関連検索

&lt;ul&gt;
&lt;li&gt;その情報が新しいか、正しいか&lt;/li&gt;
&lt;li&gt;URLで検索して、引用しているサイトを見る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;感情判定の例

&lt;ul&gt;
&lt;li&gt;”感情 判定”で検索、、、&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHubでもリンクを探る

&lt;ul&gt;
&lt;li&gt;古いライブラリの代替などだとREADMEに書かれていたり&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;専門の検索エンジン

&lt;ul&gt;
&lt;li&gt;Libraries.io&lt;/li&gt;
&lt;li&gt;npm trends&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どこで専門サイトを見つける？

&lt;ul&gt;
&lt;li&gt;awesome&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人は知りすぎると動けなくなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;行動

&lt;ul&gt;
&lt;li&gt;検証&lt;/li&gt;
&lt;li&gt;本当なのか？&lt;/li&gt;
&lt;li&gt;なぜ検証が必要か？

&lt;ul&gt;
&lt;li&gt;必ずしも直感は正しくない&lt;/li&gt;
&lt;li&gt;作者の説明が正しいとは限らない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;どうやって検証

&lt;ul&gt;
&lt;li&gt;コードを読む&lt;/li&gt;
&lt;li&gt;パフォーマンス系は動かさないと分からない&lt;/li&gt;
&lt;li&gt;特定のエッジケースでn倍速いとか。&lt;/li&gt;
&lt;li&gt;clone して動かすsnippetを用意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;変更点を見つける

&lt;ul&gt;
&lt;li&gt;ChangeLog, リリースノートを見る&lt;/li&gt;
&lt;li&gt;Issue/p-r を見る&lt;/li&gt;
&lt;li&gt;commit を見る&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;全ては検証できない

&lt;ul&gt;
&lt;li&gt;時間、コスト的問題&lt;/li&gt;
&lt;li&gt;不確実性があれば掲載をスルー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;説明&lt;/li&gt;
&lt;li&gt;postem（Electronクライアント）を作った、それを使って投稿&lt;/li&gt;
&lt;li&gt;説明文

&lt;ul&gt;
&lt;li&gt;言葉は人によって解釈が違う&lt;/li&gt;
&lt;li&gt;JSer.infoで気にしていること&lt;/li&gt;
&lt;li&gt;整理・正確・現状・中立・関連性・客観的&lt;/li&gt;
&lt;li&gt;使いたくない言葉もある&lt;/li&gt;
&lt;li&gt;煽る系&lt;/li&gt;
&lt;li&gt;意図的に避けている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSAwards

&lt;ul&gt;
&lt;li&gt;中止になった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSer.infoで使う言葉

&lt;ul&gt;
&lt;li&gt;特徴、目的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CODE OF CONDUCT

&lt;ul&gt;
&lt;li&gt;その場所をどうやって扱って欲しいかを表明する&lt;/li&gt;
&lt;li&gt;jser.info/CODEOFCONDUCT.md&lt;/li&gt;
&lt;li&gt;基本的に中立的な立場を表明している&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;このイベントもCoCを定義している&lt;/li&gt;
&lt;li&gt;言葉の難しさ&lt;/li&gt;
&lt;li&gt;正しいことを言っても正しく伝わるとは限らない

&lt;ul&gt;
&lt;li&gt;正しいことを言う != 正しく伝える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;言葉とツール&lt;/li&gt;
&lt;li&gt;機械的に弾く&lt;/li&gt;
&lt;li&gt;textlint というツール

&lt;ul&gt;
&lt;li&gt;毎回説明文をチェック&lt;/li&gt;
&lt;li&gt;引っかかれば修正もしくは掲載を諦める&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;単語感情極性対応表

&lt;ul&gt;
&lt;li&gt;0に近いほど中立&lt;/li&gt;
&lt;li&gt;記事ごとに出してみた&lt;/li&gt;
&lt;li&gt;-0.216 くらいだった&lt;/li&gt;
&lt;li&gt;どんな言語でもネガティブなほうがポジティブより多い傾向&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ&lt;/li&gt;
&lt;li&gt;説明は場所・対象により正しさが異なる&lt;/li&gt;
&lt;li&gt;正しい事実を簡単に説明するのが難しい&lt;/li&gt;
&lt;li&gt;機械的チェック&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;共有

&lt;ul&gt;
&lt;li&gt;一定数貯まったらbotが通知&lt;/li&gt;
&lt;li&gt;JSer.infoのアーカイブからピックアップして公開&lt;/li&gt;
&lt;li&gt;継続性&lt;/li&gt;
&lt;li&gt;更新コストを小さく&lt;/li&gt;
&lt;li&gt;ゴールができるだけ短く連続的に

&lt;ul&gt;
&lt;li&gt;JSer.infoは週一くらいでPOSTするゴール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;長すぎるゴールの問題&lt;/li&gt;
&lt;li&gt;解決が難しくなる&lt;/li&gt;
&lt;li&gt;不確実性のコーン&lt;/li&gt;
&lt;li&gt;直感と予想は一致しない&lt;/li&gt;
&lt;li&gt;一度やめると再開が難しい

&lt;ul&gt;
&lt;li&gt;短ければ再開も簡単&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;小さく作って小さく更新&lt;/li&gt;
&lt;li&gt;一日で1週間分の更新は難しい

&lt;ul&gt;
&lt;li&gt;細かく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;毎日作業&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;イテレーションのコスト

&lt;ul&gt;
&lt;li&gt;無コストではないけど、コストは小さく&lt;/li&gt;
&lt;li&gt;ワークフローは一方通行に&lt;/li&gt;
&lt;li&gt;Flux の図と同じ（w）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;あなたもJSer.infoを作ってみませんか？

&lt;ul&gt;
&lt;li&gt;jser/ping&lt;/li&gt;
&lt;li&gt;jser/report&lt;/li&gt;
&lt;li&gt;jser/jser.github.io&lt;/li&gt;
&lt;li&gt;jser/jser.info - Gitter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ

&lt;ul&gt;
&lt;li&gt;その場の知識はそこまで重要ではない&lt;/li&gt;
&lt;li&gt;行動が大事&lt;/li&gt;
&lt;li&gt;直感が正しくないときに確認する方法を持つ&lt;/li&gt;
&lt;li&gt;動くスコープを決める&lt;/li&gt;
&lt;li&gt;1週間で終わる目標&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;q&amp;amp;a&quot;&gt;Q&amp;amp;A&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q. 毎週たくさん記事を紹介していて、週によってテーマがあるなと感じる時がある。そういうのはネタ帳に貯めているのか？&lt;/li&gt;
&lt;li&gt;A. あまり貯めてはいない。関連が思いついたら関連に追加するくらい。同時に似たようなものが流れることも多い。&lt;/li&gt;
&lt;li&gt;Q. 今週はテーマもストックもない、で困ることはある？&lt;/li&gt;
&lt;li&gt;A. あまりない&lt;/li&gt;
&lt;li&gt;Q. PDCAみたいなふりかえりはやってない？&lt;/li&gt;
&lt;li&gt;A. 特にやってない。なんとなく雰囲気でやっているくらい。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;ecma-402を知ってますか？---@makoto_kato&quot;&gt;ECMA-402を知ってますか？ - &lt;a href=&quot;https://twitter.com/makoto_kato&quot;&gt;@makoto_kato&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;https://docs.google.com/presentation/d/1N0waGxmspbLyRf6a6hG5oXk77z69YirgW21_Cegxnq0/edit#slide=id.p&quot;&gt;ECMA-402 - Google スライド&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;プラットフォームエンジニア&lt;/li&gt;
&lt;li&gt;Firefoxのバグとか、担当する&lt;/li&gt;
&lt;li&gt;日本語でOK&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ECMA-402?

&lt;ul&gt;
&lt;li&gt;ECMAScript Internationalization API&lt;/li&gt;
&lt;li&gt;Intl.DateTimeFormat&lt;/li&gt;
&lt;li&gt;Intl.NumberFormat&lt;/li&gt;
&lt;li&gt;Intl.Collator&lt;/li&gt;
&lt;li&gt;Number.prototype.toLocaleString&lt;/li&gt;
&lt;li&gt;String.prototype.localeCompare

&lt;ul&gt;
&lt;li&gt;文字列の比較は言語によって異なる&lt;/li&gt;
&lt;li&gt;accent記号での違い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;日本語の年号を表示する、などもできる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Editors for ECMA-402

&lt;ul&gt;
&lt;li&gt;1st, 2nd, 3rd で全て Editor が違う&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rwaldron&quot;&gt;https://github.com/rwaldron&lt;/a&gt; (TC39)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/caridy&quot;&gt;https://github.com/caridy&lt;/a&gt; (TC39)&lt;/li&gt;
&lt;li&gt;ブラウザベンダの人たちではない&lt;/li&gt;
&lt;li&gt;実はブラウザベンダのサポートが弱い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.DateTimeFormat

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Intl.DateTimeFormat(&amp;quot;en_US&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Intl.DateTimeFormat(&amp;quot;zh-TW&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Intl.DateTimeFormat(&amp;quot;ja-JP-u-ca-japanese&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;→ &lt;code&gt;平成&lt;/code&gt; なども返ってくる&lt;/li&gt;
&lt;li&gt;→ 年号が変わったときもブラウザ側が実装してくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.NumberFormat

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Intl.NumberFormat(&amp;quot;de&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;→ &lt;code&gt;10.000,00€&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Intl.NumberFormat(&amp;quot;ja-JP&amp;quot;, …)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;\10,000&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;通過記号の位置など勝手にやってくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.Collator

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Intl.Collator(&amp;#39;de&amp;#39;, …)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;対応状況

&lt;ul&gt;
&lt;li&gt;ほとんどのブラウザに入っている&lt;/li&gt;
&lt;li&gt;Safari 10も入ってるので大体のブラウザで使える&lt;/li&gt;
&lt;li&gt;Android Firefox（？）&lt;/li&gt;
&lt;li&gt;ファイルサイズが増える&lt;/li&gt;
&lt;li&gt;強硬に反対されている&lt;/li&gt;
&lt;li&gt;ICUライブラリ&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://site.icu-project.org/&quot;&gt;http://site.icu-project.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;IBMが作成

&lt;ul&gt;
&lt;li&gt;去年に unicord.org 配下になった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;通貨、など全て各言語に対応&lt;/li&gt;
&lt;li&gt;Chakra, V8 などによって実装が少しぶれているところがある&lt;/li&gt;
&lt;li&gt;Chakra

&lt;ul&gt;
&lt;li&gt;Windows API&lt;/li&gt;
&lt;li&gt;今後、ICUを使っていくことになりそうとのこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;V8

&lt;ul&gt;
&lt;li&gt;ICU&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ECMA-402 NEXT

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma402&quot;&gt;https://github.com/tc39/ecma402&lt;/a&gt; にまとまっている&lt;/li&gt;
&lt;li&gt;次のバージョンに入れようというもの&lt;/li&gt;
&lt;li&gt;Zibi Braniecki

&lt;ul&gt;
&lt;li&gt;I20N の owner&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rafael Xavier&lt;/li&gt;
&lt;li&gt;Stage 4&lt;/li&gt;
&lt;li&gt;Intl.DateTimeFormat.prototype.formatToParts&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma402/issues/30&quot;&gt;https://github.com/tc39/ecma402/issues/30&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;JSON 配列で返る&lt;/li&gt;
&lt;li&gt;V8とSpidermoneky&lt;/li&gt;
&lt;li&gt;ブラウザに入っている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stage 3&lt;/li&gt;
&lt;li&gt;Intl.NumberFormat.prototype.formatToParts

&lt;ul&gt;
&lt;li&gt;SpiderMonkey&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Intl.PluralRules

&lt;ul&gt;
&lt;li&gt;SpiderMonkey&lt;/li&gt;
&lt;li&gt;複数形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntelPluralRules(&amp;quot;en-US&amp;quot;).select(1)&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;one&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IntelPluralRules(&amp;quot;en-US&amp;quot;).select(2)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;other&amp;quot;&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;デモ中&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ICUで提供されている機能をJSに持ってこようという話がある&lt;/li&gt;
&lt;li&gt;多数の Issue が上がっている&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma402/issues&quot;&gt;https://github.com/tc39/ecma402/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;q&amp;amp;a&quot;&gt;Q&amp;amp;A&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q. ICU がファイルがでかくて入れるのに躊躇するとは、ブラウザ？OS？&lt;/li&gt;
&lt;li&gt;A. ブラウザ。Chrome / Firefox はOSバージョンに依存していないものは、ここが響く。古いOSだと依存バージョンが入っていないので、ブラウザ側にいれる必要がある&lt;/li&gt;
&lt;li&gt;Q. 今の仕様だと普通の人が使うには辛そうなインターフェイス。これは意図的にそうしているのか？そこまで考慮されていないだけなのか？&lt;/li&gt;
&lt;li&gt;A. そこまで考えられてないだけだと思われる。元々フレームワークとかアプリのレイヤーから少し離れてる人が書いていたため&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;2017年のjavascriptとフロントエンドの楽しみ方---@potato4d&quot;&gt;2017年のJavaScriptとフロントエンドの楽しみ方 - &lt;a href=&quot;https://twitter.com/potato4d&quot;&gt;@potato4d&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;https://speakerdeck.com/potato4d/2017nian-falsejavascriptto-hurontoendofalsele-simikata-number-jserinfo&quot;&gt;2017年のJavaScriptと フロントエンドの楽しみかた #jserinfo // Speaker Deck&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;春から東京&lt;/li&gt;
&lt;li&gt;Vue.js周りが中心&lt;/li&gt;
&lt;li&gt;Electonでツール作成&lt;/li&gt;
&lt;li&gt;漢は黙ってjQuery&lt;/li&gt;
&lt;li&gt;（正しさハラスメントの人？）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;2016年のJSの変化

&lt;ul&gt;
&lt;li&gt;ES周り&lt;/li&gt;
&lt;li&gt;2015→2016

&lt;ul&gt;
&lt;li&gt;async/await 周りが盛り上がり&lt;/li&gt;
&lt;li&gt;SafariがES2015&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;パッケージ

&lt;ul&gt;
&lt;li&gt;npm / yarn&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;フレームワーク

&lt;ul&gt;
&lt;li&gt;Angular2&lt;/li&gt;
&lt;li&gt;Vueシェア増加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SPA・モダンフレームワークを使うのが当たり前になった&lt;/li&gt;
&lt;li&gt;React / Angular のどちらかあるいは両方使える人が増えた&lt;/li&gt;
&lt;li&gt;珍しくなくなった&lt;/li&gt;
&lt;li&gt;2016年は浸透の1年&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;進化から浸透

&lt;ul&gt;
&lt;li&gt;その先は進出&lt;/li&gt;
&lt;li&gt;レイヤー間を越境する2017年&lt;/li&gt;
&lt;li&gt;JSといえばフロントエンドと言われるがそこだけではないはず&lt;/li&gt;
&lt;li&gt;バックエンドとしてのJS&lt;/li&gt;
&lt;li&gt;フロントエンドにおけるPWA… （追いつけず）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;バックエンドとしてのJS

&lt;ul&gt;
&lt;li&gt;Express + Serverless&lt;/li&gt;
&lt;li&gt;Serverless Framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://serverless.com/&quot;&gt;https://serverless.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;いい感じにサーバレスなバックエンドを構成できるフレームワーク

&lt;ul&gt;
&lt;li&gt;AWS Lambdaをよしなに使ってくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Serverless への期待

&lt;ul&gt;
&lt;li&gt;サーバ管理の必要性の薄さ&lt;/li&gt;
&lt;li&gt;サーバサイドのコードは書きたいがインフラ管理までしたくない&lt;/li&gt;
&lt;li&gt;PaaS的な&lt;/li&gt;
&lt;li&gt;クラウド環境においてJSのみで記述できる&lt;/li&gt;
&lt;li&gt;ロマンを感じさせる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;新たに開拓されそうなレイヤ

&lt;ul&gt;
&lt;li&gt;PWAとハイブリッドアプリ&lt;/li&gt;
&lt;li&gt;PWA&lt;/li&gt;
&lt;li&gt;Progressive Web Apps

&lt;ul&gt;
&lt;li&gt;オフライン、ワーカー&lt;/li&gt;
&lt;li&gt;Webにアプリのようなリッチな体験を&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SPAは技術的観点が大きい、PWAはUXに関わる&lt;/li&gt;
&lt;li&gt;Web自体に増えるAPI&lt;/li&gt;
&lt;li&gt;PWAとAPIの組み合わせ

&lt;ul&gt;
&lt;li&gt;ベンダごとの差異&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;デスクトップ向けのオフライン周り

&lt;ul&gt;
&lt;li&gt;少し改善されつつあるが、まだまだ難しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ハイブリッドアプリの再来の可能性&lt;/li&gt;
&lt;li&gt;Cordova方式から変わっていくトレンド&lt;/li&gt;
&lt;li&gt;「WebviewでHTMLが動くからすごい」からの脱却&lt;/li&gt;
&lt;li&gt;React Nativeなどネイティブ方面&lt;/li&gt;
&lt;li&gt;まとめ&lt;/li&gt;
&lt;li&gt;ハイブリッドアプリの勢力が強くなる可能性は大きくあると予想&lt;/li&gt;
&lt;li&gt;WeexをWatchしていきたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;余談

&lt;ul&gt;
&lt;li&gt;Web アセンブリ&lt;/li&gt;
&lt;li&gt;Python → Go の事例&lt;/li&gt;
&lt;li&gt;テクノロジの境界線が薄くなってきている&lt;/li&gt;
&lt;li&gt;好きな技術を好きな領域で使える未来

&lt;ul&gt;
&lt;li&gt;ex. サーバレス、Python を Go に&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レイヤーの越境を楽しむのが良いのではないか？&lt;/li&gt;
&lt;li&gt;フロントエンドカンファレンス（3/18開催）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://kfug.jp/frontconf2017/&quot;&gt;http://kfug.jp/frontconf2017/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;関西&lt;/li&gt;
&lt;li&gt;興味あれば是非！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;a-piece-of-potential-of-cognitive-services---@ovrmrw&quot;&gt;A piece of potential of Cognitive Services - &lt;a href=&quot;https://twitter.com/ovrmrw&quot;&gt;@ovrmrw&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;https://docs.google.com/presentation/d/1rwmyRW99N4ZAPM5gyDGjgv0yvJXVATUom6rNxAZrYvQ/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.g1aed898fe2_0_156&quot;&gt;A piece of potential of Cognitive Services - Google スライド&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Cognitive Service

&lt;ul&gt;
&lt;li&gt;Watson など機械学習サービスを使ってどのようなものができるのか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;なんて事のないただの人w&lt;/li&gt;
&lt;li&gt;Angular Japan UG のスタッフ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GitHub repo

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/angular-realtime-translation-presentation&quot;&gt;https://github.com/ovrmrw/angular-realtime-translation-presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/cognitive-server-starter&quot;&gt;https://github.com/ovrmrw/cognitive-server-starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今日はアプリの紹介をしていく

&lt;ul&gt;
&lt;li&gt;デモ&lt;/li&gt;
&lt;li&gt;英語で話すとニコ動的なコメントが英語＋日本語で流れる&lt;/li&gt;
&lt;li&gt;このアプリをどのように構成されているのかの話&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Angular (front-end)

&lt;ul&gt;
&lt;li&gt;ニコニコ動画風のコメント&lt;/li&gt;
&lt;li&gt;Angular animation apiで実装&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hapi (server-side)

&lt;ul&gt;
&lt;li&gt;Cognitive Serversとコネクションする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Watson

&lt;ul&gt;
&lt;li&gt;Speech to Text API&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/developercloud/speech-to-text.html&quot;&gt;http://www.ibm.com/smarterplanet/jp/ja/ibmwatson/developercloud/speech-to-text.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;音声データをテキストデータとしてリアルタイムで返ってくる&lt;/li&gt;
&lt;li&gt;スタート・ストップボタンを押してない&lt;/li&gt;
&lt;li&gt;リアルタイムレコーディング&lt;/li&gt;
&lt;li&gt;2つのマイクを使っている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Google Cloud Translator

&lt;ul&gt;
&lt;li&gt;Hapi 経由でこちらにも接続&lt;/li&gt;
&lt;li&gt;Watson で返ってきた英文を Cloud Translator に投げて翻訳&lt;/li&gt;
&lt;li&gt;Angularで翻訳前/翻訳語を Google Slide にオーバーレイ表示する&lt;/li&gt;
&lt;li&gt;少しディレイする&lt;/li&gt;
&lt;li&gt;日本語で話して英語に翻訳も&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;サービスの値段について

&lt;ul&gt;
&lt;li&gt;Watson&lt;/li&gt;
&lt;li&gt;最初の1000分/月は無料

&lt;ul&gt;
&lt;li&gt;Googleは60分 / MS は 120分&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;超過分は $0.02/分&lt;/li&gt;
&lt;li&gt;発表時間20分 = 月の無料枠0.2%&lt;/li&gt;
&lt;li&gt;Google Cloud Translator&lt;/li&gt;
&lt;li&gt;100万文字毎に $20（無料枠はない）&lt;/li&gt;
&lt;li&gt;Microsoft Cognitive Serivices&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/cognitive-services/en-us/&quot;&gt;https://www.microsoft.com/cognitive-services/en-us/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;200万文字/月は無料

&lt;ul&gt;
&lt;li&gt;それ以上行くと打ち止め&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜこれを作ったのか？

&lt;ul&gt;
&lt;li&gt;東京Node学園などで感じたことが元になっている&lt;/li&gt;
&lt;li&gt;両側の話&lt;/li&gt;
&lt;li&gt;登壇・通訳

&lt;ul&gt;
&lt;li&gt;リズムが良くない&lt;/li&gt;
&lt;li&gt;話したい事の半分くらいになってしまう&lt;/li&gt;
&lt;li&gt;自分でも半分くらいしかわからないことも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;日本人が日本語で発表

&lt;ul&gt;
&lt;li&gt;日本語ネイティブではない参加者にも分かるように&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;技術的には比較的簡単&lt;/li&gt;
&lt;li&gt;気づいたこと&lt;/li&gt;
&lt;li&gt;Google Slides は iframe にするといい

&lt;ul&gt;
&lt;li&gt;フルスクリーンだとオーバーレイ表示がうまくいかない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;q&amp;amp;a&quot;&gt;Q&amp;amp;A&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q. 字を流している技術は？&lt;/li&gt;
&lt;li&gt;A. Angular Animation API を使っている。20秒かけて左9000pxに向けて流している。そこで止まる。よほど長い文字でなければ大丈夫。配列に追加している。20秒後には左に行ったものは消している。Fluxみたいなストアが動いていて、20秒経過したら削除。メモリにも優しい。&lt;/li&gt;
&lt;li&gt;Q. どれくらい英語の練習をしたのか？&lt;/li&gt;
&lt;li&gt;A. JSer.infoを普通に参加者で応募。抽選で落選。発表枠が空いてた。そこから。Watsonに合わせて自分の発音をチューニング。結構発音が厳しい。&lt;/li&gt;
&lt;li&gt;Q. 上に表示はWatson？&lt;/li&gt;
&lt;li&gt;A. グレーのは認識中のもの。0.5秒くらいでfinal、watsonが区切る。白い文字はWatson。緑色がGoogle 翻訳のもの&lt;/li&gt;
&lt;li&gt;Q. mic is active の部分は？&lt;/li&gt;
&lt;li&gt;A. watson へ送っているところ。これは自前で書いている。&lt;/li&gt;
&lt;li&gt; 右下のスライドURLを変えると、そのスライドで発表可能&lt;/li&gt;
&lt;li&gt;Q. 韓国語をサポートする予定は？&lt;/li&gt;
&lt;li&gt;A. Watson / Google翻訳は韓国語に対応しているので&lt;/li&gt;
&lt;li&gt;Q. アプリケーションは公開されている？&lt;/li&gt;
&lt;li&gt;A. GitHub にある（スライド中にURLがある・スライドは後ほど公開）

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/angular-realtime-translation-presentation&quot;&gt;https://github.com/ovrmrw/angular-realtime-translation-presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ovrmrw/cognitive-server-starter&quot;&gt;https://github.com/ovrmrw/cognitive-server-starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q. Hapi を使った理由は？&lt;/li&gt;
&lt;li&gt;A. Express がよくわからないから。Hapi に慣れているから。デモはサーバに上げずにローカルで動かしている。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;opalのすすめ---@youchan&quot;&gt;Opalのすすめ - &lt;a href=&quot;https://twitter.com/youchan&quot;&gt;@youchan&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;スライド: &lt;a href=&quot;http://slides.youchan.org/JSerInfo6th&quot;&gt;JSerInfo6th&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;OpalのVirtualDOMなど作っている&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youchan/hyalite&quot;&gt;https://github.com/youchan/hyalite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby方面から来ました

&lt;ul&gt;
&lt;li&gt;Q. サーバサイドを書いている・Rubyで書いている人&lt;/li&gt;
&lt;li&gt;A. そこそこいますね&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Opal アドベンドカレンダー

&lt;ul&gt;
&lt;li&gt;2016年書いてます&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Opal とか

&lt;ul&gt;
&lt;li&gt;Ruby → JS のトランスパイラ&lt;/li&gt;
&lt;li&gt;Nodeなくても動く&lt;/li&gt;
&lt;li&gt;Rubyコアライブラリを同梱&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JSインテグレーション

&lt;ul&gt;
&lt;li&gt;バッククォートで囲むと JS として埋め込まれる&lt;/li&gt;
&lt;li&gt;ローカル変数はそのまま参照できる&lt;/li&gt;
&lt;li&gt;NativeモジュールでWrapperが書ける&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;なぜOpal

&lt;ul&gt;
&lt;li&gt;Rubyが大好きだから&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ruby の強力な機能

&lt;ul&gt;
&lt;li&gt;Classベースのオブジェクト指向&lt;/li&gt;
&lt;li&gt;組み込みライブラリ&lt;/li&gt;
&lt;li&gt;API豊富

&lt;ul&gt;
&lt;li&gt;外部ライブラリ入れなくてお&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;メタプログラミング&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Classベースのオブジェクト指向

&lt;ul&gt;
&lt;li&gt;mix-in でprototypeベースのようにも使える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;include Enumerable&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;組み込みライブラリ

&lt;ul&gt;
&lt;li&gt;Array, Hash, Rangeは便利&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; で配列の結合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-&lt;/code&gt; で配列の一部除外&lt;/li&gt;
&lt;li&gt;入れ子の配列を &lt;code&gt;.flatten&lt;/code&gt; でフラットに&lt;/li&gt;
&lt;li&gt;破壊的、非破壊的メソッドを &lt;code&gt;!&lt;/code&gt; で見分けられる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;map!()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hash.merge()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;(1..3).to_a&lt;/code&gt;  , &lt;code&gt;(1…3).to_a&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;強力なメタプログラミングのサポート

&lt;ul&gt;
&lt;li&gt;オープンクラス、動的なメソッド定義&lt;/li&gt;
&lt;li&gt;ゴーストメソッド&lt;/li&gt;
&lt;li&gt;言語内DSL&lt;/li&gt;
&lt;li&gt;Rake: Makeの Ruby 版&lt;/li&gt;
&lt;li&gt;Vagrant, Chef, etc.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;オープンクラス、動的なメソッド定義

&lt;ul&gt;
&lt;li&gt;クラスベースであってもJSのように動的なメソッド定義ができる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ゴーストメソッド

&lt;ul&gt;
&lt;li&gt;メソッドが見つからなかった時に発動&lt;/li&gt;
&lt;li&gt;動的なメソッド名で動かしたい時&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Opalを活かしたフレームワーク

&lt;ul&gt;
&lt;li&gt;Hyalite&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youchan/hyalite&quot;&gt;https://github.com/youchan/hyalite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Menilite&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/youchan/menilite&quot;&gt;https://github.com/youchan/menilite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hyalite

&lt;ul&gt;
&lt;li&gt;発表スライドもこれで&lt;/li&gt;
&lt;li&gt;React を書いている人はわかりやすいのでは、とのこと&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Isomorphoic Programming

&lt;ul&gt;
&lt;li&gt;Rubyでサーバサイド、ならばフロントもRubyで書けるといいよね&lt;/li&gt;
&lt;li&gt;そこでMenilite&lt;/li&gt;
&lt;li&gt;サーバサイドのモデルをクライアントからも使える&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if_server&lt;/code&gt; で分岐できる&lt;/li&gt;
&lt;li&gt;ActiveRecordインテグレーション&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;まとめ

&lt;ul&gt;
&lt;li&gt;OpalはRuby→JSのトランスパイラ&lt;/li&gt;
&lt;li&gt;Rubyの強力な機能について説明&lt;/li&gt;
&lt;li&gt;Opalの日本語コミュニティ&lt;/li&gt;
&lt;li&gt;Slackにあるので参加してくれると嬉しい

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opalrb-jp-slack.herokuapp.com/&quot;&gt;https://opalrb-jp-slack.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;how-amp-works-(ampについて)---@kishu&quot;&gt;HOW AMP WORKS (AMPについて) - @Kishu&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;自己紹介

&lt;ul&gt;
&lt;li&gt;Navarでフロントエンド担当&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ampproject.org/&quot;&gt;Accelerated Mobile Pages Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ウェブページを早くレンダリングするための技術&lt;/li&gt;
&lt;li&gt;By Google&lt;/li&gt;
&lt;li&gt;パフォーマンス向上のために行って来た Google のノウハウが詰まっている&lt;/li&gt;
&lt;li&gt;Web ページ用の機能がそのまま使える&lt;/li&gt;
&lt;li&gt;HTML5, JS, CSS3, Cache&lt;/li&gt;
&lt;li&gt;Google の CDN にキャッシュされる&lt;/li&gt;
&lt;li&gt;AMP HTML&lt;/li&gt;
&lt;li&gt;拡張可能な HTML

&lt;ul&gt;
&lt;li&gt;拡張タグ&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;amp-carousel&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;amp.js&lt;/li&gt;
&lt;li&gt;ページで使うリソースのライフサイクル、レンダリング速度に関するライブラリ&lt;/li&gt;
&lt;li&gt;AMP では外部 JS が使えない

&lt;ul&gt;
&lt;li&gt;カスタムJSは sandbox の iframe で使える&lt;/li&gt;
&lt;li&gt;あるいは自分でカスタム amp component&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP STYLE = CSS&lt;/li&gt;
&lt;li&gt;外部のスタイル、インラインスタイルは許可しない&lt;/li&gt;
&lt;li&gt;最大50KB&lt;/li&gt;
&lt;li&gt;パターン&lt;/li&gt;
&lt;li&gt;HTML と AMP をペア&lt;/li&gt;
&lt;li&gt;スタンドアローン AMP&lt;/li&gt;
&lt;li&gt;まとめ&lt;/li&gt;
&lt;li&gt;AMPを使えば、Googleが高速レンダリングを保証&lt;/li&gt;
&lt;li&gt;ロードを感じさせない速度&lt;/li&gt;
&lt;li&gt;AMPを使えば、カリカリにチューニングしなくても速度が出せる&lt;/li&gt;
&lt;li&gt;AMPコンポーネント&lt;/li&gt;
&lt;li&gt;基本コンポーネントと拡張コンポーネント&lt;/li&gt;
&lt;li&gt;基本コンポーネントは、HTMLを代替しているイメージ&lt;/li&gt;
&lt;li&gt;拡張コンポーネント

&lt;ul&gt;
&lt;li&gt;JSを書かずにAMPタグのみで実装可能&lt;/li&gt;
&lt;li&gt;カルーセル&lt;/li&gt;
&lt;li&gt;ライトボックス&lt;/li&gt;
&lt;li&gt;サイドバー&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bench-marking

&lt;ul&gt;
&lt;li&gt;Navar TVで試した&lt;/li&gt;
&lt;li&gt;イメージと動画が多いサイト&lt;/li&gt;
&lt;li&gt;ベンチマークIssue&lt;/li&gt;
&lt;li&gt;動画

&lt;ul&gt;
&lt;li&gt;動作する（https必須）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JS

&lt;ul&gt;
&lt;li&gt;カスタムJSは使えない&lt;/li&gt;
&lt;li&gt;“top”でスクロールなども使えず&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;AMP でのタイムライン&lt;/li&gt;
&lt;li&gt;1秒速くなった&lt;/li&gt;
&lt;li&gt;AMP でのネットワーク&lt;/li&gt;
&lt;li&gt;AMP 未適応

&lt;ul&gt;
&lt;li&gt;全てのリソース（48個）を一気にリクエスト&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP 適応

&lt;ul&gt;
&lt;li&gt;最初に26個のリクエスト、他は順次読み込む&lt;/li&gt;
&lt;li&gt;表示されるものを先にリクエスト・ダウンロード&lt;/li&gt;
&lt;li&gt;スクロールして表示されそうになるときに遅延ロード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How AMP works?

&lt;ul&gt;
&lt;li&gt;非同期スクリプトのみ許可&lt;/li&gt;
&lt;li&gt;全てのリソースサイズを指定&lt;/li&gt;
&lt;li&gt;拡張コンポーネントをレンダリングを遮断せずに実行可能&lt;/li&gt;
&lt;li&gt;3rd Party JSをパースから除外(基本的に使えない)&lt;/li&gt;
&lt;li&gt;CSSは内部スタイルシートのみ許可&lt;/li&gt;
&lt;li&gt;Webフォントを効率的にダウンロード&lt;/li&gt;
&lt;li&gt;真っ先にダウンロード&lt;/li&gt;
&lt;li&gt;レイアウト性能が上がる&lt;/li&gt;
&lt;li&gt;スタイル再計算の最小化&lt;/li&gt;
&lt;li&gt;GPU加速アニメーションのみ表示&lt;/li&gt;
&lt;li&gt;リソースのロード順番を制御&lt;/li&gt;
&lt;li&gt;重要なリソースからダウンロード&lt;/li&gt;
&lt;li&gt;ページの即時ロード&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AMP Inside

&lt;ul&gt;
&lt;li&gt;カスタムエレメント&lt;/li&gt;
&lt;li&gt;&lt;code&gt;registerElement()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;AMP Component = HTML Custom Elements&lt;/li&gt;
&lt;li&gt;新しいHTMLタイプを定義してライフサイクルを制御&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/custom-elements/&quot;&gt;https://www.w3.org/TR/custom-elements/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;W3C標準の機能&lt;/li&gt;
&lt;li&gt;AMPライフサイクルはこれを拡張

&lt;ul&gt;
&lt;li&gt;ダウンロード、レンダリング視点の制御が可能になる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;FSM (Finite-State Machine)&lt;/li&gt;
&lt;li&gt;条件により一つの状態を持つ&lt;/li&gt;
&lt;li&gt;条件が変わると別の状態に変わる&lt;/li&gt;
&lt;li&gt;状態が変わるとそれに伴うアクションを実行する&lt;/li&gt;
&lt;li&gt;doPass = discoverWork + work&lt;/li&gt;
&lt;li&gt;discoverWork&lt;/li&gt;
&lt;li&gt;AMPサイズ関連のパース&lt;/li&gt;
&lt;li&gt;レイアウトのJobスケジューリングなど&lt;/li&gt;
&lt;li&gt;work&lt;/li&gt;
&lt;li&gt;Jobの優先順位を計算、Jobを選択、レイアウト開始&lt;/li&gt;
&lt;li&gt;Single Pass Process&lt;/li&gt;
&lt;li&gt;優先順位が高いJobはそのまま作業、低いのは、キューに&lt;/li&gt;
&lt;li&gt;AMP Promise&lt;/li&gt;
&lt;li&gt;不要なイベントハンドルの処理を無くせる&lt;/li&gt;
&lt;li&gt;インターフェイスの統一ができる&lt;/li&gt;
&lt;li&gt;Optimization Reflow / Repaint&lt;/li&gt;
&lt;li&gt;Width / Height の変更があると該当のエレメントの再計算&lt;/li&gt;
&lt;li&gt;レンダーキューに入れて必要な時に一気に実行

&lt;ul&gt;
&lt;li&gt;最適化して高速化が可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.clientHeight&lt;/code&gt;  などで Reflow 発生&lt;/li&gt;
&lt;li&gt;&lt;code&gt;element.style.height = (h1 *2) + &amp;#39;px&amp;#39;&lt;/code&gt;  などで Job 発生&lt;/li&gt;
&lt;li&gt;Class Vsync&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;measure()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;runScheduledTasks()&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;egjs&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/naver/egjs&quot;&gt;https://github.com/naver/egjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Navar で公開しているUIコンポーネントライブラリ&lt;/li&gt;
&lt;li&gt;パフォーマンス重視&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascript-discussion&quot;&gt;JavaScript Discussion&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://app.sli.do/event/bkry5ojl/ask&quot;&gt;JSer.info 6周年 - JavaScript Discussion&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;テーマ: productionでのJS/CSSなどのcompile timeが長くて辛い(yarn + webpack)。毎回deployに5分ぐらいかかってる。何とかならないか?

&lt;ul&gt;
&lt;li&gt;アクビでもして待て&lt;/li&gt;
&lt;li&gt;Babelが遅いのは把握&lt;/li&gt;
&lt;li&gt;make で -j8 で分離して回避&lt;/li&gt;
&lt;li&gt;デプロイがどこからどこまでかはあるが、&lt;/li&gt;
&lt;li&gt;push して本番に出るまでが5分ならそこまで遅くないのでは？&lt;/li&gt;
&lt;li&gt;デプロイ時に瞬間にテストをする人が多い？&lt;/li&gt;
&lt;li&gt;push 時にテスト実行&lt;/li&gt;
&lt;li&gt;デプロイ時は本番サーバに出すだけ&lt;/li&gt;
&lt;li&gt;デプロイプロセスにビルドとテストが入っている人は？&lt;/li&gt;
&lt;li&gt;ビルドだけの人は？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Angular2は成功しそうですか?、どうやって予想していますか?

&lt;ul&gt;
&lt;li&gt;何を持っての成功か？&lt;/li&gt;
&lt;li&gt;Angular1より使われるか？

&lt;ul&gt;
&lt;li&gt;結構しんどい。 1 は相当使われている。超えるには相当時間がかかる。時間がかかるが成功はすると思う。&lt;/li&gt;
&lt;li&gt;Angular2とは言わないで、とコミュニティでは言っている&lt;/li&gt;
&lt;li&gt;Angularと呼んでほしい&lt;/li&gt;
&lt;li&gt;3 はスキップ、次は 4 になる&lt;/li&gt;
&lt;li&gt;「Angularのバージョン4を使っている」という表現にしてほしい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: jQueryは辞めようみたいにいう声よく聞きますけど、ぶっちゃけまだまだ使ってますよね？&lt;/li&gt;
&lt;li&gt;まだ使っている人は？&lt;/li&gt;
&lt;li&gt;会場の半分くらいはいる&lt;/li&gt;
&lt;li&gt;クライアントに指定されている&lt;/li&gt;
&lt;li&gt;「semantic-ui を使ってください」という指定

&lt;ul&gt;
&lt;li&gt;jQuery 依存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bootstrap は 4 で jQuery 辞めるという話&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: azuさんのJS愛はどこからやってきたのですか？

&lt;ul&gt;
&lt;li&gt;趣味なので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: ESModuleの最新情報を教えてください。

&lt;ul&gt;
&lt;li&gt;相変わらず進んでなさそう？&lt;/li&gt;
&lt;li&gt;Safari が ship した&lt;/li&gt;
&lt;li&gt;テックプレビューには出ている&lt;/li&gt;
&lt;li&gt;今のところバグは出てなさそう&lt;/li&gt;
&lt;li&gt;パフォーマンスは http2 などが必要になりそう&lt;/li&gt;
&lt;li&gt;ダイレクトインポート&lt;/li&gt;
&lt;li&gt;stage 3 なので入れてもいいのでは？ &lt;/li&gt;
&lt;li&gt;loader の仕様は？&lt;/li&gt;
&lt;li&gt;無視でw&lt;/li&gt;
&lt;li&gt;ブラウザ側の実装は進んでいる&lt;/li&gt;
&lt;li&gt;全ブラウザで進んでいる&lt;/li&gt;
&lt;li&gt;CORS のスペックが厳しい&lt;/li&gt;
&lt;li&gt;Node はまだ&lt;/li&gt;
&lt;li&gt;テーマ: SSRのアプローチって率直に言って「正解」だと思いますか？&lt;/li&gt;
&lt;li&gt;SSRをやっている人は？&lt;/li&gt;
&lt;li&gt;会場では数人？&lt;/li&gt;
&lt;li&gt;正解かはわからないが速い&lt;/li&gt;
&lt;li&gt;会場がこんなに少ないとは思わなかった&lt;/li&gt;
&lt;li&gt;正解だと思う。&lt;/li&gt;
&lt;li&gt;ユーザーメリットある&lt;/li&gt;
&lt;li&gt;体感速度が上がる&lt;/li&gt;
&lt;li&gt;問題点は実装が難しい

&lt;ul&gt;
&lt;li&gt;ライブラリで解決されるのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;単純なサーバサイドレンダリングだと&lt;/li&gt;
&lt;li&gt;サーバがやることを最小&lt;/li&gt;
&lt;li&gt;初回レンダリングのみサーバサイド

&lt;ul&gt;
&lt;li&gt;フロントに寄せていくという意味だと良い&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ファーストビューの見えるところだけサーバサイドレンダリング

&lt;ul&gt;
&lt;li&gt;これをやり始めるとサーバサイドの複雑性が増してしまうのでは？&lt;/li&gt;
&lt;li&gt;リクルートでの事例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 韓国ではMarkup開発者とJavaScript開発者が分かれている場合が多いですが、日本はどうですか。

&lt;ul&gt;
&lt;li&gt;分業されている人は？&lt;/li&gt;
&lt;li&gt;会場ではあまりいない&lt;/li&gt;
&lt;li&gt;2013年の頃の会社だといた&lt;/li&gt;
&lt;li&gt;減っている気がする&lt;/li&gt;
&lt;li&gt;マークアップとは CSS ？&lt;/li&gt;
&lt;li&gt;かつてコーダーと呼ばれていた人？&lt;/li&gt;
&lt;li&gt;CSS と HTML をやっている人&lt;/li&gt;
&lt;li&gt;会場に来ているのはあまり分かれていない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Isomorphic programmingってどうですか?meteorとか流行ってるんでしょうか?

&lt;ul&gt;
&lt;li&gt;あまり言わなくなった？&lt;/li&gt;
&lt;li&gt;名前は変わっているが、やろうとしていることは変わっていない&lt;/li&gt;
&lt;li&gt;meteor はダメだったのでは？&lt;/li&gt;
&lt;li&gt;Vue.js の作者が Meteor にいたけど、独立したとか&lt;/li&gt;
&lt;li&gt;Meteor 詳しい人は？&lt;/li&gt;
&lt;li&gt;会場にはいなかった&lt;/li&gt;
&lt;li&gt;Node Core が URL を入れてくれたのが良かった&lt;/li&gt;
&lt;li&gt;Node 標準が頑張ってくれるといいのにな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: コンパイルして、デプロイして公開の流れはどうされていますか？サーバサイドとの共存や使っているツール、サービスなど

&lt;ul&gt;
&lt;li&gt;GitHub に push → ビルドとテスト&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;デプロイ時は tar ball

&lt;ul&gt;
&lt;li&gt;deploy は 30sec くらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jenkins でコンパイルの生成物をどこかに入れる&lt;/li&gt;
&lt;li&gt;Circle CI + S3 でやっている人はいますか？

&lt;ul&gt;
&lt;li&gt;Travis でやってる。生成物は S3 へアップ&lt;/li&gt;
&lt;li&gt;特殊な URL 経由で、JS だけ S3 にアップされたものを読み込むという仕込み&lt;/li&gt;
&lt;li&gt;それで本番サーバで確認する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Aurelia は最近どうなのでしょうか？

&lt;ul&gt;
&lt;li&gt;元 Angular の人、いまは MS へ&lt;/li&gt;
&lt;li&gt;最近どうかの知識はない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Promiseのcancelがキャンセルされた経緯

&lt;ul&gt;
&lt;li&gt;正確な経緯は外に出ていない&lt;/li&gt;
&lt;li&gt;それしか解決できない API がイマイチだ、など&lt;/li&gt;
&lt;li&gt;社内政治の結果？&lt;/li&gt;
&lt;li&gt;Dominic「もう疲れたよ」&lt;/li&gt;
&lt;li&gt;Fetch のキャンセルをどうするか？という話に戻った&lt;/li&gt;
&lt;li&gt;1/23 にミーティングがある&lt;/li&gt;
&lt;li&gt;その結果何かが変わるかも&lt;/li&gt;
&lt;li&gt;呟いとくので興味があれば参加してみては&lt;/li&gt;
&lt;li&gt;属人性問題？&lt;/li&gt;
&lt;li&gt;特定の人に依存しちゃっている？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 2017年で起るであろう、Webトレンド教えてください

&lt;ul&gt;
&lt;li&gt;ありません！&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 社内でJSerを増やすためにはどうすればよいでしょうか？ （他言語をメインでやっている人は、JS界隈のトレンド変化が早く、「僕は消耗したくない！5年後10年後ならやってもいいよ！」と言われます）

&lt;ul&gt;
&lt;li&gt;かつてやっていたこと&lt;/li&gt;
&lt;li&gt;JS 書く人を募集&lt;/li&gt;
&lt;li&gt;採用するしかないんじゃないかな&lt;/li&gt;
&lt;li&gt;書きたい人は書いているのでは？&lt;/li&gt;
&lt;li&gt;雇用を増やしましょう&lt;/li&gt;
&lt;li&gt;会社でフロントエンドウイークリーランチ&lt;/li&gt;
&lt;li&gt;興味ある人たちで読む

&lt;ul&gt;
&lt;li&gt;「興味ある人」に絞り込まれている問題はある&lt;/li&gt;
&lt;li&gt;フロントエンドを触るけど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;マンスリー版もやりたいな、と思っている&lt;/li&gt;
&lt;li&gt;単発・期間限定で企画をすることがある&lt;/li&gt;
&lt;li&gt;JS に触れてない人を巻き込むという方法&lt;/li&gt;
&lt;li&gt;「3年間毎日 JS の人が欲しい」と言い続けた結果、来なかったのでやめた&lt;/li&gt;
&lt;li&gt;JSer.infoを毎週読むという活動をしている&lt;/li&gt;
&lt;li&gt;ちょこちょこ参加者は増えた&lt;/li&gt;
&lt;li&gt;雑な情報を吹き込むくらいはできている&lt;/li&gt;
&lt;li&gt;お金と継続的な活動をしましょう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: フレームワークを選択する時主にどんな部分を重要に思いますか。

&lt;ul&gt;
&lt;li&gt;ライブラリのバージョンが枯れているかは重要ではなかった&lt;/li&gt;
&lt;li&gt;解決したいモチベーションが何なのか？&lt;/li&gt;
&lt;li&gt;何を解決したいかのメリットが自分たちとあっているか？&lt;/li&gt;
&lt;li&gt;ユーザーベース、パトロン系が大きいところを考慮

&lt;ul&gt;
&lt;li&gt;ex. VirtualDOM なら React (Facebook)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;人数少ない・バイトがいる・人員が限られている例&lt;/li&gt;
&lt;li&gt;協業ベースができる技術を選択

&lt;ul&gt;
&lt;li&gt;デザイナーだけどコードかける人&lt;/li&gt;
&lt;li&gt;関わる人数がどれだけ増やせるか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;学習コストをかけていられない

&lt;ul&gt;
&lt;li&gt;軽ければ軽いほどいい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Backbone から React へ移行時の例&lt;/li&gt;
&lt;li&gt;部分的に置き換えていけるか？を考慮&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: SPA してる人って OGP とかどうしてるんですか

&lt;ul&gt;
&lt;li&gt;OGP = Facebook のヘッダ情報&lt;/li&gt;
&lt;li&gt;blog の例&lt;/li&gt;
&lt;li&gt;Angular で blog&lt;/li&gt;
&lt;li&gt;Facebook, Twitter でキレイに表示されるために&lt;/li&gt;
&lt;li&gt;SSR を組むのは面倒くさかった&lt;/li&gt;
&lt;li&gt;prerender.io というサービスを使った

&lt;ul&gt;
&lt;li&gt;ミドルウェアは OSS &lt;/li&gt;
&lt;li&gt;キャッシュサーバは無料もしくは有料&lt;/li&gt;
&lt;li&gt;HTML を phantom-js でレンダリング&lt;/li&gt;
&lt;li&gt;それをキャッシュ&lt;/li&gt;
&lt;li&gt;キャッシュをクロールに読ませる&lt;/li&gt;
&lt;li&gt;そのようにサーバ設定をする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;レンダリングしたものを返すのが定説っぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: React Storybook って使っている人ますか？ぶっちゃけどうですか？

&lt;ul&gt;
&lt;li&gt;React Storybook = スタイルガイドのようなもの&lt;/li&gt;
&lt;li&gt;コンポーネントをビルドして使っていた&lt;/li&gt;
&lt;li&gt;それが面倒だった&lt;/li&gt;
&lt;li&gt;Storybook を使うとコンポーネントだけ実装していけば良い（ちと聞き取れず、不明）&lt;/li&gt;
&lt;li&gt;残念だったこと

&lt;ul&gt;
&lt;li&gt;コミュニケーションコストを下げたかったが、うまくいかなかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Abema TV は使っていた？&lt;/li&gt;
&lt;li&gt;パラメータはみれて、プレビューは便利&lt;/li&gt;
&lt;li&gt;どれだけ頑張るか、による&lt;/li&gt;
&lt;li&gt;協業時のスタイルガイドとして使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Yarnをproductionで使ってますか?

&lt;ul&gt;
&lt;li&gt;使っている人？&lt;/li&gt;
&lt;li&gt;4人くらい&lt;/li&gt;
&lt;li&gt;npm シュリンクラップ使っている人？&lt;/li&gt;
&lt;li&gt;ちょいちょい？&lt;/li&gt;
&lt;li&gt;npm 5 でちゃんと治すところあり&lt;/li&gt;
&lt;li&gt;npm4 だとまだ不十分？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: create-react-appで自分のHP作ったんですが、GooglePageSpeedでチェックしたところ結構点数低いです。 これどうにかして点数上げられないですか？モバイル66点、パソコンが85点です。ちなみにGithubでホストしています。

&lt;ul&gt;
&lt;li&gt;開発途中？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Webpackから開放されるときは来ますか？ES modulesが主要ブラウザ・Node.jsでサポートされたとき？

&lt;ul&gt;
&lt;li&gt;使っている人？&lt;/li&gt;
&lt;li&gt;3-4割&lt;/li&gt;
&lt;li&gt;browserify を使っている人?

&lt;ul&gt;
&lt;li&gt;1-2割&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;loader だけじゃないことを Webpack でやっている&lt;/li&gt;
&lt;li&gt;だから解放されない&lt;/li&gt;
&lt;li&gt;Webpack で .js 以外の処理をしている人は？&lt;/li&gt;
&lt;li&gt;会場 1-2 割くらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: SPAはこの先当分の間続くと思いますか？

&lt;ul&gt;
&lt;li&gt;そちらにメリットがあるなら続くのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: PWA流行ってなくないですか？

&lt;ul&gt;
&lt;li&gt;そちらにメリットがあるなら続くのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: wasm が普及して JS が置き換えられる未来は来るのか、ということを皆さんどう思ってるのか気になります

&lt;ul&gt;
&lt;li&gt;JS には複雑・簡単なアプリの両翼がある&lt;/li&gt;
&lt;li&gt;簡単な、では JS が残る&lt;/li&gt;
&lt;li&gt;複雑な、だと、、ゲームでどうなるかによる

&lt;ul&gt;
&lt;li&gt;1年で解決する問題ではなさそう&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;wasm で書くのは10年後とかになるのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 海外のJSコミュニティと関わるにはどうすればよいでしょうか

&lt;ul&gt;
&lt;li&gt;commit する、とか&lt;/li&gt;
&lt;li&gt;開発者の代わりに返答してあげる、とか&lt;/li&gt;
&lt;li&gt;海外のカンファレンスへ行ったことある人は？&lt;/li&gt;
&lt;li&gt;JS の例ではなかったが、思い切ってエイヤで行けば関われるのでは？&lt;/li&gt;
&lt;li&gt;韓国での話は？&lt;/li&gt;
&lt;li&gt;コントリビュートしようと思っているが、うまく行ってない&lt;/li&gt;
&lt;li&gt;サムソン

&lt;ul&gt;
&lt;li&gt;jQueryのコントリビューターを採用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Navar

&lt;ul&gt;
&lt;li&gt;webkit のフルタイムコミッタを採用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;会社や周りの環境も大事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: プロジェクト横断のUIコンポーネント、Reactで組んじゃっていいのかな？いまWeb Componentsで組むのも。。

&lt;ul&gt;
&lt;li&gt;Rollup （？）の作者が同じようなことを言っている&lt;/li&gt;
&lt;li&gt;Onsen JS (Onsen UI ?) の仕組みが参考になるかも&lt;/li&gt;
&lt;li&gt;React / Angular の特定技術にフォーカスした人は？&lt;/li&gt;
&lt;li&gt;Firefox のカスタムエレメンツ&lt;/li&gt;
&lt;li&gt;v1 で止まっている？&lt;/li&gt;
&lt;li&gt;Shadow DOM

&lt;ul&gt;
&lt;li&gt;プライオリティは高くない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;1社しか実装しないものは微妙&lt;/li&gt;
&lt;li&gt;Webkit がちゃんとした後で動くのでは？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 最近のフロントエンドがとまってみえるひとの数 ?

&lt;ul&gt;
&lt;li&gt;いない？&lt;/li&gt;
&lt;li&gt;&lt;img class=&#39;emoji&#39; title=&#39;:sushi:&#39; alt=&#39;:sushi:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f363.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; が止まって見える？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: Proxy APIきてほしい

&lt;ul&gt;
&lt;li&gt;来なかった&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: HTML ImportsはMozillaではどうなりました？

&lt;ul&gt;
&lt;li&gt;なかったことで。。。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: serversideをnode.js(tsも可)で書いている人ってどれくらいいるのでしょうか？

&lt;ul&gt;
&lt;li&gt;書いている人？&lt;/li&gt;
&lt;li&gt;5人くらい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 次のフレームワークプロレスはいつ起こると思いますか？

&lt;ul&gt;
&lt;li&gt;テーマ: react native や native script をガッツリ触ってる人はいますか？&lt;/li&gt;
&lt;li&gt;使っている人？&lt;/li&gt;
&lt;li&gt;React Native をプロダクション投入&lt;/li&gt;
&lt;li&gt;React Native ミートアップあるよ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマ: 自社で管理しているWebサイトのリニューアルがあり、 これを機にES6を導入したいと思っています。 トランスパイラはTypeScriptとBabelが候補で個人的には型を厳格に取り扱えるTSが良いと思っています。メリデメと他の候補があれば教えてほしいです。

&lt;ul&gt;
&lt;li&gt;比較にならないのでは？&lt;/li&gt;
&lt;li&gt;好きな方を使えば良いのでは？&lt;/li&gt;
&lt;li&gt;Babelを使うことがどういうことか&lt;/li&gt;
&lt;li&gt;ES6で書ける&lt;/li&gt;
&lt;li&gt;Flow を使っている人？&lt;/li&gt;
&lt;li&gt;TypeScript ではなくこちらを選んだ理由&lt;/li&gt;
&lt;li&gt;React を使っていた

&lt;ul&gt;
&lt;li&gt;他者が使ってて良さそうと思ったから&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ES5 → ES6&lt;/li&gt;
&lt;li&gt;Flow がまだ実装進んでなかった&lt;/li&gt;
&lt;li&gt;TypeScript のほうが進んでいた

&lt;ul&gt;
&lt;li&gt;IDE サポートも進んでいた&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;型ありから型ありに移行するなら、まぁいいかという印象

&lt;ul&gt;
&lt;li&gt;型なしからの乗り換えよりははるかにマシ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Sun, 15 Jan 2017 20:36:00 +0900</pubDate>
        <link>https://jser.info/2017/01/15/jser-info-6years/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/15/jser-info-6years/</guid>
        
        <category>イベント</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>雑記</category>
        
      </item>
    
      <item>
        <title>2017-01-11のJS: Node.js v7.4.0とnpm v4、PhantomJS 2.5.0 Beta、クリーンコード</title>
        <description>&lt;p&gt;JSer.info #313 - &lt;a href=&quot;https://nodejs.org/en/blog/release/v7.4.0/&quot; title=&quot;Node v7.4.0&quot;&gt;Node v7.4.0&lt;/a&gt;がリリースされました。&lt;br&gt;
BufferやEventEmitterのパフォーマンス改善が含まれています。&lt;br&gt;
また、Node.js v7.4.0では、npm &lt;a href=&quot;https://github.com/npm/npm/releases/tag/v4.0.5&quot; title=&quot;v4.0.5&quot;&gt;v4.0.5&lt;/a&gt;が同梱されるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/npm/npm/blob/v4.0.5/CHANGELOG.md&quot; title=&quot;npm/CHANGELOG.md at v4.0.5 · npm/npm&quot;&gt;npm/CHANGELOG.md at v4.0.5 · npm/npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;npm v4では、&lt;code&gt;prepublish&lt;/code&gt;のライフサイクルが&lt;code&gt;prepublishOnly&lt;/code&gt;と&lt;code&gt;prepare&lt;/code&gt;に分割されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://iamakulov.com/notes/all/npm-4-prepublish/&quot; title=&quot;npm 4 is splitting the “prepublish” script into “prepublishOnly” and “prepare”&quot;&gt;npm 4 is splitting the “prepublish” script into “prepublishOnly” and “prepare”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、&lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;にデフォルトで&lt;code&gt;devDependencies&lt;/code&gt;が含まれるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/shinout/items/97e4ae21800bbc98f2c0&quot; title=&quot;npm shrinkwrapを運用で使うためのコツ - Qiita&quot;&gt;npm shrinkwrapを運用で使うためのコツ - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;npm v3以下のshrinkwrapの挙動について書かれている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他にも非推奨のコマンドを削除したり、挙動が変更/改善されている部分があります。&lt;br&gt;
詳しくはCHANGELOGを参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/npm/npm/blob/v4.0.5/CHANGELOG.md&quot; title=&quot;npm/CHANGELOG.md at v4.0.5 · npm/npm&quot;&gt;npm/CHANGELOG.md at v4.0.5 · npm/npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2016/10/24/npm-4.0.0-node.js-v6.9.0-lts-webpack2/&quot; title=&quot;2016-10-24のJS: npm 4.0.0、Node.js v6.9.0 (LTS)、webpack@2へのマイグレーション - JSer.info&quot;&gt;2016-10-24のJS: npm 4.0.0、Node.js v6.9.0 (LTS)、webpack@2へのマイグレーション - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.risingstack.com/yarn-vs-npm-node-js-package-managers/&quot; title=&quot;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&quot;&gt;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;npm v4の変更についても書かれている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;ヘッドレスブラウザの&lt;a href=&quot;https://groups.google.com/forum/#!topic/phantomjs/AefOuwkgBh0&quot; title=&quot;PhantomJS 2.5.0 Beta&quot;&gt;PhantomJS 2.5.0 Beta&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;p&gt;依存するQTWebKitがアップデートされたことにより、ES2015の機能がサポートされています。&lt;br&gt;
QTWebKitについての変更は次を参照してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/annulen/webkit/wiki/Comparison-with-QtWebKit-5.6&quot; title=&quot;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&quot;&gt;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript&quot; title=&quot;ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&quot;&gt;ryanmcdermott/clean-code-javascript&lt;/a&gt;では、&lt;a href=&quot;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&quot; title=&quot;Clean Code&quot;&gt;Clean Code&lt;/a&gt;(&lt;a href=&quot;https://www.amazon.co.jp/dp/4048676881&quot;&gt;日本語&lt;/a&gt;)の内容をベースにしたガイドラインが書かれています。&lt;/p&gt;

&lt;p&gt;読みやすい、再利用しやすい、リファクタリングしやすいコードについてES2015のコードをベースにサンプルが書かれています。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント&quot;&gt;JSer.info 6周年と300回記念イベント&lt;/a&gt;は、今週末の2017/01/15(日) に開催されます。(開場は13:30から)&lt;/p&gt;

&lt;p&gt;既に会場の入場に必要な入館IDはconnpassのメッセージ経由でメールが来ていると思うので、ご確認をよろしくお願いします。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;introducing-inferno-1.0-–-inferno_js-–-medium&quot;&gt;Introducing Inferno 1.0 – inferno_js – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/inferno-js/introducing-inferno-1-0-f3da5c4e773b&quot; title=&quot;Introducing Inferno 1.0 – inferno\_js – Medium&quot;&gt;medium.com/inferno-js/introducing-inferno-1-0-f3da5c4e773b&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Inferno 1.0リリース。&lt;br&gt;
Infernoがなぜ作られたのか、今後のロードマップについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;node-v7.4.0-(current)-|-node.js&quot;&gt;Node v7.4.0 (Current) | Node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v7.4.0/&quot; title=&quot;Node v7.4.0 (Current) | Node.js&quot;&gt;nodejs.org/en/blog/release/v7.4.0/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.js 7.4.0リリース。&lt;br&gt;
Buffer、&lt;code&gt;EventEmitter.once&lt;/code&gt;のパフォーマンス改善など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;[release]-phantomjs-2.5.0-beta---google-グループ&quot;&gt;[Release] PhantomJS 2.5.0 Beta - Google グループ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://groups.google.com/d/topic/phantomjs/AefOuwkgBh0&quot; title=&quot;\[Release\] PhantomJS 2.5.0 Beta - Google グループ&quot;&gt;groups.google.com/d/topic/phantomjs/AefOuwkgBh0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;PhantomJS 2.5.0βリリース。&lt;br&gt;
QtWebKitがアップデートされES2015のサポート、WebPのサポートなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/annulen/webkit/wiki/Comparison-with-QtWebKit-5.6&quot; title=&quot;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&quot;&gt;Comparison with QtWebKit 5.6 · annulen/webkit Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;microsoft-edge-build-15002-changelog---microsoft-edge-development&quot;&gt;Microsoft Edge build 15002 changelog - Microsoft Edge Development&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/changelog/desktop/15002/&quot; title=&quot;Microsoft Edge build 15002 changelog - Microsoft Edge Development&quot;&gt;developer.microsoft.com/en-us/microsoft-edge/platform/changelog/desktop/15002/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;MSEdge&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Windows 10 build 15002リリース。&lt;br&gt;
MSEdgeでFlashがClick to playに、Web Paymentsの試験的サポート、CSP 2.0、WebVR APIのサポートなど&lt;br&gt;
また別オリジンにおけるsetTimeout/requestAnimationFrameの呼び出し頻度を抑制するなど&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;es6-arrow-functions-in-depth&quot;&gt;ES6 arrow functions in depth&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://codesi.nz/es6-arrow-functions-in-depth/&quot; title=&quot;ES6 arrow functions in depth&quot;&gt;codesi.nz/es6-arrow-functions-in-depth/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Arrow Functionについて細かいところも含めて、解説してる記事。&lt;br&gt;
よくある&lt;code&gt;this&lt;/code&gt;の動き、暗黙的な&lt;code&gt;return&lt;/code&gt;について&lt;br&gt;
また、&lt;code&gt;new&lt;/code&gt;できない点、&lt;code&gt;new.target&lt;/code&gt;や&lt;code&gt;arguements&lt;/code&gt;を扱えない点についてなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;from-sass-to-postcss-by-tyler-gaw&quot;&gt;From Sass to PostCSS by Tyler Gaw&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tylergaw.com/articles/sass-to-postcss&quot; title=&quot;From Sass to PostCSS by Tyler Gaw&quot;&gt;tylergaw.com/articles/sass-to-postcss&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Sass&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;PostCSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SassだったものをPostCSSに置き換えるまでの話。&lt;br&gt;
Sassの構文とPostCSS拡張(cssnext)の比較&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;es-proposal:-import()&quot;&gt;ES proposal: import()&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.2ality.com/2017/01/import-operator.html&quot; title=&quot;ES proposal: import()&quot;&gt;www.2ality.com/2017/01/import-operator.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;proposal&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;現在Stage 3のProposalである、&lt;code&gt;import()&lt;/code&gt;について。&lt;br&gt;
dynamic module importsに関する仕様&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;yarn-vs-npm---the-state-of-node.js-package-managers-|-@risingstack&quot;&gt;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.risingstack.com/yarn-vs-npm-node-js-package-managers/&quot; title=&quot;Yarn vs npm - The State of Node.js Package Managers | @RisingStack&quot;&gt;blog.risingstack.com/yarn-vs-npm-node-js-package-managers/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;yarn&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;npm v4とYarnについて。&lt;br&gt;
npm v4で追加された機能の解説、Yarnの機能やロックファイルについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;web-animation-in-2017-|-nothing-new&quot;&gt;Web animation in 2017 | Nothing new&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://birtles.wordpress.com/2017/01/10/web-animation-in-2017/&quot; title=&quot;Web animation in 2017 | Nothing new&quot;&gt;birtles.wordpress.com/2017/01/10/web-animation-in-2017/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;animation&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Web Animation関連の仕様ステータスについてのまとめ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;building-a-custom-tag-input-with-skate.js&quot;&gt;Building a custom tag input with Skate.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/building-a-custom-tag-input-with-skate-js-fbd4cdf744f&quot; title=&quot;Building a custom tag input with Skate.js&quot;&gt;hackernoon.com/building-a-custom-tag-input-with-skate-js-fbd4cdf744f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;WebComponents&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Web ComponentsフレームワークであるSkate.jsを使ってタグ入力コンポーネントを作る話。&lt;br&gt;
値、スタイルの定義の仕方などについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;flux-を使わずに-react-コンポーネント間のコミュニケーションを行う8つの方法---qiita&quot;&gt;Flux を使わずに React コンポーネント間のコミュニケーションを行う8つの方法 - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/kyoshidajp/items/0ddb156d96bb6337f623&quot; title=&quot;Flux を使わずに React コンポーネント間のコミュニケーションを行う8つの方法 - Qiita&quot;&gt;qiita.com/kyoshidajp/items/0ddb156d96bb6337f623&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;翻訳&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Reactコンポーネント同士で値の受け渡しなどのパターンについて&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ryanmcdermott/clean-code-javascript:-clean-code-concepts-adapted-for-javascript&quot;&gt;ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ryanmcdermott/clean-code-javascript&quot; title=&quot;ryanmcdermott/clean-code-javascript: Clean Code concepts adapted for JavaScript&quot;&gt;github.com/ryanmcdermott/clean-code-javascript&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;OOP&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;クリーンコードをJavaScriptで行うガイドライン。&lt;br&gt;
読みやすいコードの書き方やオブジェクト指向プログラミング、SOLID、ES2015以降の機能使って分かりやすく書く話など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;縦書きweb普及委員会&quot;&gt;縦書きWeb普及委員会&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://tategaki.github.io/&quot; title=&quot;縦書きWeb普及委員会&quot;&gt;tategaki.github.io/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;縦書きCSSについての解説サイト&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;flow-runtime&quot;&gt;Flow Runtime&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://codemix.github.io/flow-runtime/&quot; title=&quot;Flow Runtime&quot;&gt;codemix.github.io/flow-runtime/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;flowtype&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;babel&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Flow互換の型チェックを実装したランタイムとBabelプラグイン。&lt;br&gt;
Flowで書いたコードをランタイムチェックすることができる&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;talyssonoc/structure:-a-simple-schema/attributes-library-built-on-top-of-modern-javascript&quot;&gt;talyssonoc/structure: A simple schema/attributes library built on top of modern JavaScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/talyssonoc/structure&quot; title=&quot;talyssonoc/structure: A simple schema/attributes library built on top of modern JavaScript&quot;&gt;github.com/talyssonoc/structure&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ES2015 classesのモデルに対してスキーマを定義できるライブラリ。&lt;br&gt;
スキーマを元にバリデーションやシリアライズを行える&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;wheresrhys/fetch-mock:-mock-http-requests-made-using-fetch-(or-isomorphic-fetch)&quot;&gt;wheresrhys/fetch-mock: Mock http requests made using fetch (or isomorphic-fetch)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wheresrhys/fetch-mock&quot; title=&quot;wheresrhys/fetch-mock: Mock http requests made using fetch (or isomorphic-fetch)&quot;&gt;github.com/wheresrhys/fetch-mock&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Fetch&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;HTTP&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Fetch APIのモックライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;danculley/real-dom:-a-~1k-non-virtual-dom-non-framework-framework-for-simple-apps&quot;&gt;danculley/real-dom: A ~1K non-virtual DOM non-framework framework for simple apps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/danculley/real-dom&quot; title=&quot;danculley/real-dom: A ~1K non-virtual DOM non-framework framework for simple apps&quot;&gt;github.com/danculley/real-dom&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;jsx&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JSXで書くこともでき、ReduxライクなStateマシンを扱えるDOMコンポーネントライブラリ。&lt;br&gt;
50行ほどのコードで実装されていてとても小さい。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;xvg&quot;&gt;xvg&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://xvg.now.sh/&quot; title=&quot;xvg&quot;&gt;xvg.now.sh/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;SVG&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;debug&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SVG pathをアウトライン化、アンカーを表示することでSVGをデバッグすることができるChrome拡張&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;nodekit&quot;&gt;NodeKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodekit.io/&quot; title=&quot;NodeKit&quot;&gt;nodekit.io/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Electron&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsをiOS/Android/Windowsなどのアプリで組み込んで使うようのフレームワーク。&lt;br&gt;
JavaScriptのバインディングにJavaScriptCoreやChackraCoreを使う&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;jlongster/prettier:-prettier-is-an-opinionated-javascript-formatter.&quot;&gt;jlongster/prettier: Prettier is an opinionated JavaScript formatter.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jlongster/prettier&quot; title=&quot;jlongster/prettier: Prettier is an opinionated JavaScript formatter.&quot;&gt;github.com/jlongster/prettier&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;折り返し桁数ベースのJavaScript整形ツール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jlongster.com/A-Prettier-Formatter&quot; title=&quot;A Prettier JavaScript Formatter&quot;&gt;A Prettier JavaScript Formatter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;書籍関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;o&amp;#x27;reilly-japan---初めてのjavascript-第3版&quot;&gt;O&amp;#x27;Reilly Japan - 初めてのJavaScript 第3版&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oreilly.co.jp/books/9784873117836/&quot; title=&quot;O&amp;#39;Reilly Japan - 初めてのJavaScript 第3版&quot;&gt;www.oreilly.co.jp/books/9784873117836/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;book&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2017年1月20日発売&lt;br&gt;
Learning JavaScriptの翻訳本。&lt;br&gt;
ES2015+に対応した内容&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.marlin-arms.com/support/ljs3/&quot; title=&quot;初めてのJavaScript 第3版 サポートページ — マーリンアームズ&quot;&gt;初めてのJavaScript 第3版 サポートページ — マーリンアームズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;front-end-handbook-2017-·-gitbook&quot;&gt;Front-end Handbook 2017 · GitBook&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details&quot; title=&quot;Front-end Handbook 2017 · GitBook&quot;&gt;www.gitbook.com/book/frontendmasters/front-end-handbook-2017/details&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;book&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;フロントエンドに関する電子書籍の2017年版&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gitbook.com/book/frontendmasters/front-end-handbook/details&quot; title=&quot;Front-end Handbook 2016 · GitBook&quot;&gt;Front-end Handbook 2016 · GitBook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 09:36:00 +0900</pubDate>
        <link>https://jser.info/2017/01/11/Node.js-v7.4.0-npm-v4-PhantomJS-2.5.0-Beta-clean-code/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/11/Node.js-v7.4.0-npm-v4-PhantomJS-2.5.0-Beta-clean-code/</guid>
        
        <category>Node.js</category>
        
        <category>npm</category>
        
        <category>webkit</category>
        
        <category>PhantomJS</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2017-01-04のJS: PostCSS概要、Chrome開発者ツール、FuseBox</title>
        <description>&lt;p&gt;JSer.info #312 - &lt;a href=&quot;http://qiita.com/morishitter/items/4a04eb144abf49f41d7d&quot; title=&quot;PostCSS まとめ - Qiita&quot;&gt;PostCSS まとめ - Qiita&lt;/a&gt;という記事では、&lt;a href=&quot;https://github.com/postcss/postcss&quot; title=&quot;PostCSS&quot;&gt;PostCSS&lt;/a&gt;とはどのようなものなのかについて書かれています。&lt;/p&gt;

&lt;p&gt;PostCSSはCSSのツール基盤となるフレームワークで、CSSパーサやジェネレータなどを含んでいるもので、プラグインとしてCSSに対する様々な処理を扱えるようになっています(パーサ自体もプラグインで拡張できるのでSassなども一部扱えます。)&lt;/p&gt;

&lt;p&gt;この記事では、PostCSSを使って動くプリプロセッサやLinterといったツールなどについて紹介されています。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://umaar.github.io/devtools-optimise-your-web-development-workflow-2016/#/&quot; title=&quot;Optimise your web development workflow 2016&quot;&gt;Optimise your web development workflow 2016&lt;/a&gt;というスライドでは、Chromeの開発者ツールの機能について紹介されています。&lt;br&gt;
開発者ツールには大量の機能がありますが、GIF画像とともにそれらの機能を紹介しています。&lt;/p&gt;

&lt;p&gt;Elements、Timeline、Networks、Auditsパネルにある機能やそれに関連する仕様やツールなども紹介しているので、&lt;br&gt;
一度見てみると面白いかもしれません。&lt;/p&gt;

&lt;p&gt;また、1Tips/1ページ形式で開発者ツールのTipsを紹介しているので合わせてみると良いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://umaar.com/dev-tips/&quot; title=&quot;Dev Tips - Developer Tips by Umar Hansa&quot;&gt;Dev Tips - Developer Tips by Umar Hansa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;http://fuse-box.org/&quot; title=&quot;Fusebox&quot;&gt;Fusebox&lt;/a&gt;というbundler/module loaderツールが公開されています。&lt;br&gt;
webpackなどが近いツールで、プラグインで変換レイヤーを追加でき、その結果を一つのファイルにまとめるbundlerです。&lt;br&gt;
また、&lt;code&gt;FuseBox.import&lt;/code&gt;というLoader APIも合わせて利用でき、webpackやSystemJSなどに近い機能を持っています。&lt;/p&gt;

&lt;p&gt;高速な変換がウリの一つで、モジュールの依存関係と変換済みファイルをキャッシュすることで、再変換時の処理時間が短くできるようになっています。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;FuseBox cache and deps.json &lt;a href=&quot;https://t.co/4EjS62HY28&quot;&gt;pic.twitter.com/4EjS62HY28&lt;/a&gt;&lt;/p&gt;&amp;mdash; azu (@azu_re) &lt;a href=&quot;https://twitter.com/azu_re/status/816568272736788480&quot;&gt;January 4, 2017&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fuse-box/fuse-box&quot; title=&quot;fuse-box/fuse-box&quot;&gt;fuse-box/fuse-box&lt;/a&gt;のソースコードはTypeScriptで書かれていて、&lt;br&gt;
まだでたばかりなのでソースコードを見てみるのも面白いかもしれません。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/ping&quot; title=&quot;jser/ping&quot;&gt;jser/ping&lt;/a&gt;にPingのIssueを立てると&lt;a href=&quot;https://twitter.com/jser_info&quot; title=&quot;@jser_info&quot;&gt;@jser_info&lt;/a&gt;のTwitterに流れるようになりました&lt;/li&gt;
&lt;li&gt;データ分析用に&lt;a href=&quot;https://jser.info/data-dashboard/&quot; title=&quot;JSer.info Data Dashboard&quot;&gt;JSer.info Data Dashboard&lt;/a&gt;を作りました

&lt;ul&gt;
&lt;li&gt;JSer.infoの記事や紹介URLに関するデータを色々な形でみることを目的にしたページです&lt;/li&gt;
&lt;li&gt;面白そうなデータの読み方があるなら&lt;a href=&quot;https://github.com/jser/data-dashboard&quot; title=&quot;jser/data-dashboard: JSer.info Data Dashboard.&quot;&gt;jser/data-dashboard: JSer.info Data Dashboard.&lt;/a&gt;にIssue/PRを立てると良さそうです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;stealjs-1.0-release&quot;&gt;StealJS 1.0 Release&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bitovi.com/blog/stealjs-1.0-release&quot; title=&quot;StealJS 1.0 Release&quot;&gt;www.bitovi.com/blog/stealjs-1.0-release&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;開発時は動的なモジュールローダで、本番時はsteal-toolsでのproduction buildでbundleできるStealJS 1.0リリース&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VKydmxRm6w8&quot; title=&quot;Easy ES6 with StealJS - YouTube&quot;&gt;Easy ES6 with StealJS - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;optimizing-page-speeds-with-lazyloading-|-jscrambler-blog&quot;&gt;Optimizing Page Speeds With Lazyloading | Jscrambler Blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.jscrambler.com/optimizing-page-speeds-with-lazyloading/&quot; title=&quot;Optimizing Page Speeds With Lazyloading | Jscrambler Blog&quot;&gt;blog.jscrambler.com/optimizing-page-speeds-with-lazyloading/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AngularのルーティングとコンポーネントのLazyLoadについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;lazy-loading---react&quot;&gt;Lazy Loading - React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/guides/lazy-load-react/&quot; title=&quot;Lazy Loading - React&quot;&gt;webpack.js.org/guides/lazy-load-react/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack2を使ったReactコンポーネントのLazyLoad方法についてのドキュメント&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;flowtypeでfluxアーキテクチャに型付けをするという発表をした---please-drive-faster&quot;&gt;FlowtypeでFluxアーキテクチャに型付けをするという発表をした - Please Drive Faster&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://joe-re.hatenablog.com/entry/2016/12/29/204917&quot; title=&quot;FlowtypeでFluxアーキテクチャに型付けをするという発表をした - Please Drive Faster&quot;&gt;joe-re.hatenablog.com/entry/2016/12/29/204917&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;flowtype&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Flux&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;FlowTypeを使ってFluxアーキテクチャのパターンに型を付ける話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/joe-re/items/d6fd262a8c6017f41e22&quot; title=&quot;flowtypeによりFluxにおいて型安全を手に入れる - Qiita&quot;&gt;flowtypeによりFluxにおいて型安全を手に入れる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;node.js-interview-questions-and-answers-(2017-edition)-|-@risingstack&quot;&gt;Node.js Interview Questions and Answers (2017 Edition) | @RisingStack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.risingstack.com/node-js-interview-questions-and-answers-2017/&quot; title=&quot;Node.js Interview Questions and Answers (2017 Edition) | @RisingStack&quot;&gt;blog.risingstack.com/node-js-interview-questions-and-answers-2017/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;security&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsにおいて良くある質問とその答えについてをQ&amp;amp;A形式で書かれたもの。&lt;br&gt;
コーディングスタイル、よくある書き間違い、セキュリティ、タイミング攻撃などについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;react-interview-questions&quot;&gt;React Interview Questions&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://tylermcginnis.com/react-interview-questions/&quot; title=&quot;React Interview Questions&quot;&gt;tylermcginnis.com/react-interview-questions/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Reactについての疑問をQ&amp;amp;A形式で書かれた記事。&lt;br&gt;
Classで書くコンポーネントと関数として書くコンポーネントの違い、&lt;code&gt;refs&lt;/code&gt;とは何か、&lt;code&gt;key&lt;/code&gt;属性はなぜ大事なのか、コンポーネントパターンなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;writing-html-with-accessibility-in-mind-–-medium&quot;&gt;Writing HTML with accessibility in mind – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@matuzo/writing-html-with-accessibility-in-mind-a62026493412&quot; title=&quot;Writing HTML with accessibility in mind – Medium&quot;&gt;medium.com/@matuzo/writing-html-with-accessibility-in-mind-a62026493412&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;HTMLとアクセシビリティ(スクリーンリーダー)について&lt;br&gt;
&lt;code&gt;lang&lt;/code&gt;属性、&lt;code&gt;alt&lt;/code&gt;属性、&lt;code&gt;&amp;lt;buton&amp;gt;&lt;/code&gt;要素、landmarksについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;postcss-まとめ---qiita&quot;&gt;PostCSS まとめ - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/morishitter/items/4a04eb144abf49f41d7d&quot; title=&quot;PostCSS まとめ - Qiita&quot;&gt;qiita.com/morishitter/items/4a04eb144abf49f41d7d&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;PostCSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;PostCSSの概要と特徴、作られたモチベーションについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;front-end-performance-checklist-2017-(pdf,-apple-pages)-–-smashing-magazine&quot;&gt;Front-End Performance Checklist 2017 (PDF, Apple Pages) – Smashing Magazine&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2016/12/front-end-performance-checklist-2017-pdf-pages/&quot; title=&quot;Front-End Performance Checklist 2017 (PDF, Apple Pages) – Smashing Magazine&quot;&gt;www.smashingmagazine.com/2016/12/front-end-performance-checklist-2017-pdf-pages/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ウェブフロントエンドのパフォーマンスチェックリスト。&lt;br&gt;
ファイルサイズ、配信方法、レンダリング、モニタリング、テスト方法などについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-reflect-api-of-es6-–-zsolt-nagy&quot;&gt;The Reflect API of ES6 – Zsolt Nagy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zsoltnagy.eu/the-reflect-api-of-es6/&quot; title=&quot;The Reflect API of ES6 – Zsolt Nagy&quot;&gt;www.zsoltnagy.eu/the-reflect-api-of-es6/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Reflect APIについての紹介記事&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;mozanime-in-2016-|-nothing-new&quot;&gt;MozAnime in 2016 | Nothing new&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://birtles.wordpress.com/2016/12/27/mozanime-in-2016/&quot; title=&quot;MozAnime in 2016 | Nothing new&quot;&gt;birtles.wordpress.com/2016/12/27/mozanime-in-2016/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;animation&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2016年におけるFirefoxのWeb Animations対応やデバッグ機能の更新点について&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;スライド、動画関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;optimise-your-web-development-workflow-2016&quot;&gt;Optimise your web development workflow 2016&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://umaar.github.io/devtools-optimise-your-web-development-workflow-2016/&quot; title=&quot;Optimise your web development workflow 2016&quot;&gt;umaar.github.io/devtools-optimise-your-web-development-workflow-2016/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;debug&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;slide&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Chromeの開発者ツールについてのスライド。&lt;br&gt;
主にCSS、アクセシビリティ、パフォーマンスについて豊富なGIFアニメーションと共に紹介している。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;fuse-box-bundler-/-api-reference&quot;&gt;Fuse-Box bundler / API Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://fuse-box.org/&quot; title=&quot;Fuse-Box bundler / API Reference&quot;&gt;fuse-box.org/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack/Browserifyのようなbundler、JSPM/SystemJSのようなloaderを機能を持つツール。&lt;br&gt;
変換結果の依存関係とキャッシュをすることで高速な変換ができる。&lt;br&gt;
プラグインで対応する変換を拡張できる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@ivanorlov/fusebox-bundle-your-project-within-a-fraction-of-a-second-f2360ba95727&quot; title=&quot;FuseBox — bundle your project within a fraction of a second&quot;&gt;FuseBox — bundle your project within a fraction of a second&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;gothdo/range:-a-javascript-implementation-of-the-python&amp;#x27;s-range()-function.&quot;&gt;Gothdo/range: A JavaScript implementation of the Python&amp;#x27;s range() function.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Gothdo/range&quot; title=&quot;Gothdo/range: A JavaScript implementation of the Python&amp;#39;s range() function.&quot;&gt;github.com/Gothdo/range&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pythonの&lt;code&gt;range()&lt;/code&gt;のJavaScript実装ライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;andywer/leakage:-🐛-memory-leak-testing-for-node.&quot;&gt;andywer/leakage: 🐛 Memory leak testing for node.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/andywer/leakage&quot; title=&quot;andywer/leakage: 🐛 Memory leak testing for node.&quot;&gt;github.com/andywer/leakage&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;libn&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsでメモリリークのテストを書くことができるライブラリ。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;nolanlawson/marky:-high-resolution-javascript-timer-based-on-performance.mark()-and-measure()&quot;&gt;nolanlawson/marky: High-resolution JavaScript timer based on performance.mark() and measure()&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nolanlawson/marky&quot; title=&quot;nolanlawson/marky: High-resolution JavaScript timer based on performance.mark() and measure()&quot;&gt;github.com/nolanlawson/marky&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;libn&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;User Timing API(&lt;code&gt;performance.mark&lt;/code&gt;と&lt;code&gt;performance.measure&lt;/code&gt;)ベースの処理時間計測ライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;maniart/diffyjs:-a-dependency-free-motion-detection-library-for-the-browser&quot;&gt;maniart/diffyjs: A dependency-free motion detection library for the browser&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/maniart/diffyjs&quot; title=&quot;maniart/diffyjs: A dependency-free motion detection library for the browser&quot;&gt;github.com/maniart/diffyjs&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;画像&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;を使って取得した画像から、フレームごとの動きのdiffを取得できるライブラリ。&lt;br&gt;
motion detectionライブラリ&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 17:28:00 +0900</pubDate>
        <link>https://jser.info/2017/01/04/postcss-chrome-fusebox/</link>
        <guid isPermaLink="true">https://jser.info/2017/01/04/postcss-chrome-fusebox/</guid>
        
        <category>bundler</category>
        
        <category>Tools</category>
        
        <category>Chrome</category>
        
        <category>PostCSS</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2016-12-27のJS: SharedArrayBufferとAtomics API、Node.js Stream、JavaScript obfuscator</title>
        <description>&lt;p&gt;JSer.info #311 - Safari Technology Preview Release 20とMSEdgeのJavaScriptエンジンである&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&quot; title=&quot;ChakraCore 1.4.0&quot;&gt;ChakraCore 1.4.0&lt;/a&gt;が公開されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&quot;&gt;Release Notes · Microsoft/ChakraCore Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webkit.org/blog/7120/release-notes-for-safari-technology-preview-20/&quot;&gt;Release Notes for Safari Technology Preview 20 | WebKit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;どちらも&lt;a href=&quot;http://tc39.github.io/ecmascript_sharedmem/shmem.html#GlobalObject.ConstructorProps.SharedArrayBuffer&quot; title=&quot;SharedArrayBuffer&quot;&gt;SharedArrayBuffer&lt;/a&gt;が実装されています。&lt;br&gt;
SharedArrayBufferは、WebWorkerとの間でもデータを共有できる&lt;a href=&quot;https://github.com/tc39/proposals&quot;&gt;Stage 3のProposal&lt;/a&gt;仕様です。&lt;/p&gt;

&lt;p&gt;データをコピーや&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/Transferable&quot;&gt;Transfer&lt;/a&gt;ではなく、メモリで共有する仕様です。(いわゆる共有メモリ)&lt;br&gt;
複数のスレッドがメモリ内の同じデータを読み書きするため、スレッドセーフなAPIが必要になります。&lt;br&gt;
そのため、&lt;a href=&quot;https://github.com/tc39/ecmascript_sharedmem&quot; title=&quot;tc39/ecmascript_sharedmem: Shared memory and atomics for ECMAscript&quot;&gt;tc39/ecmascript_sharedmem&lt;/a&gt;の仕様では不可分操作を提供する&lt;code&gt;Atomics&lt;/code&gt; APIが合わせて定義されています。&lt;/p&gt;

&lt;p&gt;SharedArrayBufferとAtomics APIについて、詳しくは次のURLを見るのが良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecmascript_sharedmem&quot; title=&quot;tc39/ecmascript_sharedmem: Shared memory and atomics for ECMAscript&quot;&gt;tc39/ecmascript_sharedmem: Shared memory and atomics for ECMAscript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hacks.mozilla.org/2016/05/a-taste-of-javascripts-new-parallel-primitives/&quot;&gt;A Taste of JavaScript’s New Parallel Primitives ★ Mozilla Hacks – the Web developer blog&lt;/a&gt;(&lt;a href=&quot;https://dev.mozilla.jp/2016/05/a-taste-of-javascripts-new-parallel-primitives/&quot;&gt;翻訳&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/chikoski/20161113-nodefest&quot;&gt;JavaScriptでの並列プログラミング: 共有メモリーと不可分操作、ロック // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://js-next.hatenablog.com/entry/2015/09/30/225251&quot; title=&quot;SharedArrayBufferとAtomics APIについて - JS.next&quot;&gt;SharedArrayBufferとAtomics APIについて - JS.next&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stage 3の仕様ですが、既に2つ以上の実装があるため、&lt;a href=&quot;https://github.com/tc39/agendas/blob/master/2017/01.md&quot;&gt;次のTC39 Meeting(2017年1月)&lt;/a&gt;でStage 4となる予定です。&lt;br&gt;
そのため、ES2017として公開される可能性があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rwaldron/tc39-notes/blob/master/es7/2016-11/nov-30.md#13iia-sharedarraybuffer&quot; title=&quot;tc39-notes/nov-30.md at master · rwaldron/tc39-notes&quot;&gt;tc39-notes/nov-30.md at master · rwaldron/tc39-notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この仕様に先んじて、ECMAScriptに&amp;quot;Agent&amp;quot;という概念が既に追加されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tc39/ecma262/pull/522&quot; title=&quot;Add language to define Agents by lars-t-hansen · Pull Request #522 · tc39/ecma262&quot;&gt;Add language to define Agents by lars-t-hansen · Pull Request #522 · tc39/ecma262&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、2016年11月のTC39 MeetingでStageが変わったProposalは次の記事にまとめてあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals&quot; title=&quot;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&quot;&gt;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/Mizunashi_Mana/items/872354cd7bf25090932f&quot; title=&quot;Stream API入門 - Qiita&quot;&gt;Stream API入門 - Qiita&lt;/a&gt;では、Node.jsのStream APIについて解説されています。コールバックやPromise、Generator、async/awaitなどの非同期処理についても触れています。&lt;/p&gt;

&lt;p&gt;Node.js Streamの特徴の一つでもあるバッファリングとバックプレッシャーについては合わせて次の記事を見てみるといいかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techblog.yahoo.co.jp/advent-calendar-2016/node-stream-highwatermark/&quot; title=&quot;highWaterMarkから探るNode.jsのStreamの仕組み - Yahoo! JAPAN Tech Blog&quot;&gt;highWaterMarkから探るNode.jsのStreamの仕組み - Yahoo! JAPAN Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これとは別で、WHATWGが提案している&lt;a href=&quot;https://streams.spec.whatwg.org/&quot; title=&quot;Streams Standard&quot;&gt;Streams Standard&lt;/a&gt;(Fetch APIなどと連携する)も合わせて見ると面白いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/whatwg/streams/blob/master/FAQ.md&quot; title=&quot;streams/FAQ.md at master · whatwg/streams&quot;&gt;streams/FAQ.md at master · whatwg/streams&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、データのストリーム処理はJavaScriptという言語にかぎらずあるものなので、次の記事も見てみるとストリーム処理の特徴が分かりやすいかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/kimutansk/items/60e48ec15e954fa95e1c&quot; title=&quot;ストリーム処理とは何か？＋2016年の出来事 - Qiita&quot;&gt;ストリーム処理とは何か？＋2016年の出来事 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;say-allo&amp;#x27;-to-yeoman-generator-1.0-|-yeoman&quot;&gt;Say allo&amp;#x27; to yeoman-generator 1.0 | Yeoman&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://yeoman.io/blog/hello-generator-1.0.html&quot; title=&quot;Say allo&amp;#39; to yeoman-generator 1.0 | Yeoman&quot;&gt;yeoman.io/blog/hello-generator-1.0.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ジェネレーター&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Yeoman-generator 1.0リリース。&lt;br&gt;
&lt;code&gt;composeWith&lt;/code&gt;のAPIを簡略化、Yarnサポート、deprecatedなAPIを削除など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yeoman/generator/releases/tag/v1.0.0&quot; title=&quot;Release v1.0.0 🎉 · yeoman/generator&quot;&gt;Release v1.0.0 🎉 · yeoman/generator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-·-microsoft/chakracore-wiki&quot;&gt;Release Notes · Microsoft/ChakraCore Wiki&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&quot; title=&quot;Release Notes · Microsoft/ChakraCore Wiki&quot;&gt;github.com/Microsoft/ChakraCore/wiki/Release-Notes#v140&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;MSEdge&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ChakraCore 1.4リリース。&lt;br&gt;
JITがLinuxやmacOSでも有効化、async/awaitをデフォルトで有効化、SharedArrayBufferを実験的にサポート、wasmの実験的サポートなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-for-safari-technology-preview-20-|-webkit&quot;&gt;Release Notes for Safari Technology Preview 20 | WebKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7120/release-notes-for-safari-technology-preview-20/&quot; title=&quot;Release Notes for Safari Technology Preview 20 | WebKit&quot;&gt;webkit.org/blog/7120/release-notes-for-safari-technology-preview-20/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;safari&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Safari Technology Preview Release 20リリース。&lt;br&gt;
Visual Viewport、SharedArrayBufferを有効化、&lt;code&gt;block-all-mixed-content&lt;/code&gt;の追加、BlinkからportしたCSSパーサを使うようになるなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2015/01/What-the-Viewport&quot; title=&quot;What the Virtual Viewport?  |  Web  |  Google Developers&quot;&gt;What the Virtual Viewport?  |  Web  |  Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lars-t-hansen/ecmascript_sharedmem&quot; title=&quot;lars-t-hansen/ecmascript\_sharedmem: Placeholder for old shared memory spec&quot;&gt;lars-t-hansen/ecmascript_sharedmem: Placeholder for old shared memory spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-3rd-mutation-·-canjs/canjs&quot;&gt;Release 3rd Mutation · canjs/canjs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/canjs/canjs/releases/tag/v3.0.0&quot; title=&quot;Release 3rd Mutation · canjs/canjs&quot;&gt;github.com/canjs/canjs/releases/tag/v3.0.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CanJS 3.0リリース&lt;br&gt;
コードは&lt;code&gt;can-*&lt;/code&gt;からなるモジュールに分割され、&lt;code&gt;.attr()&lt;/code&gt;の代わりに&lt;code&gt;DefineMap&lt;/code&gt;の導入など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://mag.osdn.jp/16/12/22/160000&quot; title=&quot;JavaScriptフレームワーク「CanJS 3.0」リリース | OSDN Magazine&quot;&gt;JavaScriptフレームワーク「CanJS 3.0」リリース | OSDN Magazine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://donejs.com/&quot; title=&quot;donejs - donejs&quot;&gt;donejs - donejs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ecmascript-proposal-updates-@-2016-11-|-ecmascript-daily&quot;&gt;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals&quot; title=&quot;ECMAScript proposal updates @ 2016-11 | ECMAScript Daily&quot;&gt;ecmascript-daily.github.io/ecmascript/2016/12/22/ecmascript-proposals&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;proposal&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2016年11月のTC39ミーティングでのProposalのStage変動をまとめたもの&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;stream-api入門---qiita&quot;&gt;Stream API入門 - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/Mizunashi_Mana/items/872354cd7bf25090932f&quot; title=&quot;Stream API入門 - Qiita&quot;&gt;qiita.com/Mizunashi_Mana/items/872354cd7bf25090932f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;stream&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsのStream APIについて。&lt;br&gt;
非同期処理のコールバック、Promise、async/await、generatorを踏まえてのStreamについての解説。&lt;br&gt;
Write/Read/Duplex、Stream処理が得意とすること、&lt;code&gt;objectMode&lt;/code&gt;についてなど幅広く解説されてる&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;css-writing-modes-◆-24-ways&quot;&gt;CSS Writing Modes ◆ 24 ways&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://24ways.org/2016/css-writing-modes/&quot; title=&quot;CSS Writing Modes ◆ 24 ways&quot;&gt;24ways.org/2016/css-writing-modes/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CSSの&lt;code&gt;writing-mode&lt;/code&gt;プロパティについての解説&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;かずぽんブログ-•-vue.js-2016年まとめ-&amp;amp;-今後&quot;&gt;かずぽんブログ • Vue.js 2016年まとめ &amp;amp; 今後&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.kazupon.jp/post/154903508388/vuejs-2016-closing-and-future&quot; title=&quot;かずぽんブログ • Vue.js 2016年まとめ &amp;amp; 今後&quot;&gt;blog.kazupon.jp/post/154903508388/vuejs-2016-closing-and-future&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;2016年のVue.jsの変化について。&lt;br&gt;
Vue.js 2.0、コミュニティ、エコシステム、利用範囲や今後について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;firebug-lives-on-in-firefox-devtools-★-mozilla-hacks-–-the-web-developer-blog&quot;&gt;Firebug lives on in Firefox DevTools ★ Mozilla Hacks – the Web developer blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://hacks.mozilla.org/2016/12/firebug-lives-on-in-firefox-devtools/&quot; title=&quot;Firebug lives on in Firefox DevTools ★ Mozilla Hacks – the Web developer blog&quot;&gt;hacks.mozilla.org/2016/12/firebug-lives-on-in-firefox-devtools/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Firebug&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;debug&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Firebugは開発終了したが、多くの機能はFirefoxの開発者ツールに引き継がれている/引き継ぐ予定があるという話。&lt;/p&gt;

&lt;p&gt;またFirebugはマルチプロセス対応を念頭に開発されたものではなかったため、Firebugを拡張するよりも、Firefoxの開発者ツールを拡張していく方が良いという決定がされた。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;web-アクセシビリティ向け-node.js-製の自動チェックツールや-devtools-用の拡張機能など-::ハブろぐ&quot;&gt;Web アクセシビリティ向け Node.js 製の自動チェックツールや DevTools 用の拡張機能など ::ハブろぐ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://havelog.ayumusato.com/develop/a11y/e732-a11y_checking_automate.html&quot; title=&quot;Web アクセシビリティ向け Node.js 製の自動チェックツールや DevTools 用の拡張機能など ::ハブろぐ&quot;&gt;havelog.ayumusato.com/develop/a11y/e732-a11y_checking_automate.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;test&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Webアクセシビリティの自動チェックツールや補助ツールの紹介。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascriptのuiライブラリはどうあるべきかという話とonsen-uiのアーキテクチャ---id:anatooのブログ&quot;&gt;JavaScriptのUIライブラリはどうあるべきかという話とOnsen UIのアーキテクチャ - id:anatooのブログ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.anatoo.jp/entry/2016/12/09/201511&quot; title=&quot;JavaScriptのUIライブラリはどうあるべきかという話とOnsen UIのアーキテクチャ - id:anatooのブログ&quot;&gt;blog.anatoo.jp/entry/2016/12/09/201511&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;UI&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;特定のUIフレームワークに依存されないUIフレームワークの基盤をどのように作るかという話。&lt;br&gt;
CSS Components層、Web Components層、フレームワークバインディング層のレイヤー分けについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;serviceworker内にexpressサーバーを立てる---qiita&quot;&gt;ServiceWorker内にExpressサーバーを立てる - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/narirou/items/738a0fe6656d0f905e28&quot; title=&quot;ServiceWorker内にExpressサーバーを立てる - Qiita&quot;&gt;qiita.com/narirou/items/738a0fe6656d0f905e28&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ServiceWorker&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;express-serviceがどのようにして実際のNode.jsで動くExpressのコードをServiceWorkerの中でも擬似的に動かしているのかについての解説&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/express-service&quot; title=&quot;express-service&quot;&gt;express-service&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;accessibility---learn-web-development-|-mdn&quot;&gt;Accessibility - Learn web development | MDN&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Accessibility&quot; title=&quot;Accessibility - Learn web development | MDN&quot;&gt;developer.mozilla.org/en-US/docs/Learn/Accessibility&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;web &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;アクセシビリティについてのガイド&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;speedtracker&quot;&gt;SpeedTracker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://speedtracker.org/&quot; title=&quot;SpeedTracker&quot;&gt;speedtracker.org/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webservice&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;個人向けに使うCalibreやSpeedCurveのような継続的なパフォーマンス計測サービス。&lt;br&gt;
WebPageTestで取った結果をGitHubリポジトリにJekyllで動くようにデータをpushしてくれる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://calendar.perfplanet.com/2016/introducing-speedtracker/&quot; title=&quot;Performance Calendar » Introducing SpeedTracker&quot;&gt;Performance Calendar » Introducing SpeedTracker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;mithril、vue.jsの仮想dom用のi18nライブラリ作った---qiita&quot;&gt;Mithril、Vue.jsの仮想DOM用のi18nライブラリ作った - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/shibukawa/items/c2298b21b4629941b230&quot; title=&quot;Mithril、Vue.jsの仮想DOM用のi18nライブラリ作った - Qiita&quot;&gt;qiita.com/shibukawa/items/c2298b21b4629941b230&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;i18n&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsでもブラウザでも動作するi18nライブラリ。&lt;br&gt;
プレースホルダ、複数形、コンテキスト、&lt;code&gt;data-i18n&lt;/code&gt;属性に対する翻訳する機能を持つ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://i18n4v.js.org/&quot; title=&quot;i18n for Virtual DOM (i18n4v) — i18n for virtual dom 0.1.5 documentation&quot;&gt;i18n for Virtual DOM (i18n4v) — i18n for virtual dom 0.1.5 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;devongovett/regexgen:-generate-regular-expressions-that-match-a-set-of-strings&quot;&gt;devongovett/regexgen: Generate regular expressions that match a set of strings&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/devongovett/regexgen&quot; title=&quot;devongovett/regexgen: Generate regular expressions that match a set of strings&quot;&gt;github.com/devongovett/regexgen&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;正規表現&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;複数の文字列を渡して、それにマッチする正規表現を作るライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascript-obfuscator/javascript-obfuscator:-javascript-obfuscator-for-node.js&quot;&gt;javascript-obfuscator/javascript-obfuscator: JavaScript obfuscator for Node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/javascript-obfuscator/javascript-obfuscator&quot; title=&quot;javascript-obfuscator/javascript-obfuscator: JavaScript obfuscator for Node.js&quot;&gt;github.com/javascript-obfuscator/javascript-obfuscator&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptの難読化ツール/ライブラリ。&lt;br&gt;
ES2015+のコードを扱うことができ、Source Mapにも対応している&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;amilajack/eslint-plugin-compat:-browser-and-es-spec-compatibility-assertion-with-eslint&quot;&gt;amilajack/eslint-plugin-compat: Browser and ES spec compatibility assertion with ESLint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amilajack/eslint-plugin-compat&quot; title=&quot;amilajack/eslint-plugin-compat: Browser and ES spec compatibility assertion with ESLint&quot;&gt;github.com/amilajack/eslint-plugin-compat&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ESLint&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AutoPrefixerのように想定ブラウザを記述し、そのブラウザで動かないAPIを使ってないかをチェックするESLintルール。&lt;br&gt;
caniuseやcompat tableのデータを使う&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 27 Dec 2016 09:58:00 +0900</pubDate>
        <link>https://jser.info/2016/12/27/sharedarraybuffer-javascript-obfuscator-node.js-stream/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/27/sharedarraybuffer-javascript-obfuscator-node.js-stream/</guid>
        
        <category>browser</category>
        
        <category>ECMAScript</category>
        
        <category>Node.js</category>
        
        <category>Stream</category>
        
        <category>Tools</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2016-12-20のJS: RxJS v5、Angular、date-fns</title>
        <description>&lt;p&gt;JSer.info #310 - &lt;a href=&quot;https://github.com/ReactiveX/rxjs&quot; title=&quot;RxJS 5&quot;&gt;RxJS 5&lt;/a&gt;がリリースされました。&lt;br&gt;
Microsoftがメンテナンスしていた&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot; title=&quot;Reactive-Extensions/RxJS&quot;&gt;Reactive-Extensions/RxJS&lt;/a&gt;(RxJS 4)を書き直したバージョンで、互換性がある部分はありますがAPIも色々変更されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#500-2016-12-13&quot; title=&quot;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&quot;&gt;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;v4からv5へのマイグレーションは次のドキュメントにまとめられています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/MIGRATION.md&quot; title=&quot;Migrating from RxJS 4 to 5&quot;&gt;Migrating from RxJS 4 to 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RxJS v5は現在Stage 1の&lt;a href=&quot;https://github.com/tc39/proposal-observable&quot; title=&quot;ECMAScript Observable&quot;&gt;ECMAScript Observable&lt;/a&gt; Proposalに準拠した実装です。&lt;br&gt;
(&lt;a href=&quot;https://thefeedbackloop.xyz/tc39-a-process-sketch-stages-0-and-1/&quot; title=&quot;Stage 1&quot;&gt;Stage 1&lt;/a&gt;なので仕様自体が変わる可能性はあります)&lt;/p&gt;

&lt;p&gt;また、デバッグのしやすさやパフォーマンスなどが改善され、Rxの特徴と言えるOperatorが整理されています。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;AngularJS 1.xの最新版である&lt;a href=&quot;http://angularjs.blogspot.jp/2016/12/angular-160-released.html&quot; title=&quot;AngularJS 1.6.0&quot;&gt;AngularJS 1.6.0&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.blogspot.jp/2016/12/angular-160-released.html&quot; title=&quot;Angular: Angular 1.6.0 released&quot;&gt;Angular: Angular 1.6.0 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md#160-rainbow-tsunami-2016-12-08&quot; title=&quot;1.6.0 rainbow-tsunami (2016-12-08)&quot;&gt;1.6.0 rainbow-tsunami (2016-12-08)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳しい変更点は&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md#160-rainbow-tsunami-2016-12-08&quot;&gt;CHANGELOG&lt;/a&gt;にかかれています。&lt;br&gt;
jqLiteをjQuery 3の挙動に合わせるように変更、&lt;a href=&quot;http://angularjs.blogspot.jp/2016/09/angular-16-expression-sandbox-removal.html&quot;&gt;Expression Sandboxを削除&lt;/a&gt;。&lt;br&gt;
また、JSONPリクエストはホワイトリストがデフォルトになるなど多数のBreaking Changeが含まれています。&lt;/p&gt;

&lt;p&gt;AngularJS 1.xはsemverではありませんが、2.0からはsemverに沿う方針へ変更されています。&lt;br&gt;
加えて2.0はタイムラインベースのアップデートも行うため、Angaular 2からは半年ごとのmajorアップデートを行います。&lt;br&gt;
また、3.xは&lt;code&gt;@angular/router&lt;/code&gt;がすでにv3を使っていて、バージョンがずれてしまうため、次のメジャーバージョンはv4となるそうです。&lt;/p&gt;

&lt;p&gt;詳しくは、次の記事で解説されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.blogspot.jp/2016/12/ok-let-me-explain-its-going-to-be.html&quot; title=&quot;Angular: Ok... let me explain: it&amp;amp;#39;s going to be Angular 4.0, or just Angular&quot;&gt;Angular: Ok... let me explain: it&amp;#39;s going to be Angular 4.0, or just Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.publickey1.jp/blog/16/angularangular_420173angular.html&quot; title=&quot;Angularの次バージョンは「Angular 4」に、2017年3月リリース。今後は単に「Angular」と呼んでほしいと － Publickey&quot;&gt;Angularの次バージョンは「Angular 4」に、2017年3月リリース。今後は単に「Angular」と呼んでほしいと － Publickey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AngularのLTSについては特に決まっていないようです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular/issues/12331&quot; title=&quot;Angular LTS version · Issue #12331 · angular/angular&quot;&gt;Angular LTS version · Issue #12331 · angular/angular&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://date-fns.org/&quot; title=&quot;date-fns - modern JavaScript date utility library&quot;&gt;date-fns - modern JavaScript date utility library&lt;/a&gt;というライブラリは&lt;a href=&quot;http://momentjs.com/&quot; title=&quot;Moment.js&quot;&gt;Moment.js&lt;/a&gt;のように日付周りを扱うutility集ライブラリです。&lt;br&gt;
&lt;a href=&quot;https://lodash.com/&quot; title=&quot;Lodash&quot;&gt;Lodash&lt;/a&gt;のように、それぞれの操作を独立した関数として扱うことが目的の一つとなっています。&lt;br&gt;
そのため、必要なものだけを読み込んで使うことができます。&lt;/p&gt;

&lt;p&gt;また、Moment.jsは基本的にMutableなAPIとなっていますが、date-fnsはImmutableなAPIとなっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Moment.jsでもImmutableに扱うAPIの提案がでています&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/moment/moment-rfcs/pull/2&quot; title=&quot;Support a pseudo-immutable API (first-party Frozen Moment) by butterflyhug · Pull Request #2 · moment/moment-rfcs&quot;&gt;Support a pseudo-immutable API (first-party Frozen Moment) by butterflyhug · Pull Request #2 · moment/moment-rfcs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まだ開発中の部分もありますが、現在の状況は次にまとめられています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/date-fns/date-fns/issues/275#issuecomment-264934189&quot; title=&quot;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&quot;&gt;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント - connpass&quot;&gt;JSer.info 6周年と300回記念イベント - connpass&lt;/a&gt;の抽選結果が発表されています。&lt;br&gt;
まだ、発表枠があるので何か話したい事がある人は申し込んで見てください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2016/12/13/announcement-jser-info-6years-event/&quot; title=&quot;2017年1月15日(日)に JSer.info 6周年 &amp;amp;amp;&amp;amp;amp; 300回目記念イベント を開催します - JSer.info&quot;&gt;2017年1月15日(日)に JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント を開催します - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、当日JavaScript Discussionというコーナーで次の質問ボードを元に議論する時間が設けています。&lt;br&gt;
質問、聞きたいこと、話したいこと、主張を書き込むことができます。&lt;br&gt;
当日も時間を取りますが、事前に書いてもらっても問題ありません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.sli.do/event/bkry5ojl/ask&quot; title=&quot;JSer.info 6周年 - JavaScript Discussion&quot;&gt;JSer.info 6周年 - JavaScript Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;気になる質問は &lt;img class=&#39;emoji&#39; title=&#39;:+1:&#39; alt=&#39;:+1:&#39; src=&#39;https://assets.github.com/images/icons/emoji/unicode/1f44d.png&#39; height=&#39;20&#39; width=&#39;20&#39; align=&#39;absmiddle&#39; /&gt; で投票すると上に来るのでテーマとして取り上げやすくなります。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;rxjs/changelog.md-at-master-·-reactivex/rxjs&quot;&gt;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md&quot; title=&quot;rxjs/CHANGELOG.md at master · ReactiveX/rxjs&quot;&gt;github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;RxJS 5.0.0リリース&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;jsdom/changelog.md-at-9.9.0-·-tmpvar/jsdom&quot;&gt;jsdom/Changelog.md at 9.9.0 · tmpvar/jsdom&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tmpvar/jsdom/blob/9.9.0/Changelog.md&quot; title=&quot;jsdom/Changelog.md at 9.9.0 · tmpvar/jsdom&quot;&gt;github.com/tmpvar/jsdom/blob/9.9.0/Changelog.md&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;jsdom 9.9.0リリース。&lt;br&gt;
&lt;code&gt;document.createCDATASection&lt;/code&gt;、&lt;code&gt;node.wholeText&lt;/code&gt;のサポート、バグ修正など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-v5.0.0-·-reactjs/react-redux&quot;&gt;Release v5.0.0 · reactjs/react-redux&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/reactjs/react-redux/releases/tag/v5.0.0&quot; title=&quot;Release v5.0.0 · reactjs/react-redux&quot;&gt;github.com/reactjs/react-redux/releases/tag/v5.0.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;redux&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React-Redux v5.0.0リリース。&lt;br&gt;
後方互換性はあるけどメジャーアップデート、&lt;code&gt;connect()&lt;/code&gt;のオプションを追加、&lt;code&gt;connectAdvanced()&lt;/code&gt;を追加など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;webpack-2.2:-the-release-candidate-–-webpack-–-medium&quot;&gt;webpack 2.2: The Release Candidate – webpack – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/webpack/webpack-2-2-the-release-candidate-2e614d05d75f&quot; title=&quot;webpack 2.2: The Release Candidate – webpack – Medium&quot;&gt;medium.com/webpack/webpack-2-2-the-release-candidate-2e614d05d75f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack 2.2.0 RCリリース。&lt;br&gt;
2.x系初のRCリリースとなってる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.2.0-rc.0&quot; title=&quot;Release v2.2.0-rc.0 · webpack/webpack&quot;&gt;Release v2.2.0-rc.0 · webpack/webpack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-v0.37.0-·-facebook/flow&quot;&gt;Release v0.37.0 · facebook/flow&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/flow/releases/tag/v0.37.0&quot; title=&quot;Release v0.37.0 · facebook/flow&quot;&gt;github.com/facebook/flow/releases/tag/v0.37.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;flowtype&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Flow v0.37.0 リリース。&lt;br&gt;
built-in libの定義を更新、&lt;code&gt;declare module&lt;/code&gt;内で&lt;code&gt;import type&lt;/code&gt;と&lt;code&gt;import typeof&lt;/code&gt;を使えるようになるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;angular:-angular-1.6.0-released&quot;&gt;Angular: Angular 1.6.0 released&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://angularjs.blogspot.com/2016/12/angular-160-released.html&quot; title=&quot;Angular: Angular 1.6.0 released&quot;&gt;angularjs.blogspot.com/2016/12/angular-160-released.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AngularJS 1.6.0リリース。&lt;br&gt;
jqLiteをjQuery 3の挙動に合わせるように、expression sandboxを削除。&lt;br&gt;
また、JSONPリクエストはホワイトリストがデフォルトになるなど多數のBreaking Changeが含まれている&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md#160-rainbow-tsunami-2016-12-08&quot; title=&quot;angular.js/CHANGELOG.md at master · angular/angular.js&quot;&gt;angular.js/CHANGELOG.md at master · angular/angular.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.angularjs.org/guide/migration#migrating-from-1-5-to-1-6&quot; title=&quot;AngularJS: Developer Guide: Migrating from Previous Versions&quot;&gt;AngularJS: Developer Guide: Migrating from Previous Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://angularjs.blogspot.jp/2016/09/angular-16-expression-sandbox-removal.html&quot; title=&quot;Angular: Angular 1.6 - Expression Sandbox Removal&quot;&gt;Angular: Angular 1.6 - Expression Sandbox Removal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;angular:-ok...-let-me-explain:-it&amp;#x27;s-going-to-be-angular-4.0,-or-just-angular&quot;&gt;Angular: Ok... let me explain: it&amp;#x27;s going to be Angular 4.0, or just Angular&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://angularjs.blogspot.com/2016/12/ok-let-me-explain-its-going-to-be.html&quot; title=&quot;Angular: Ok... let me explain: it&amp;#39;s going to be Angular 4.0, or just Angular&quot;&gt;angularjs.blogspot.com/2016/12/ok-let-me-explain-its-going-to-be.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AngularJSの次のメジャーバージョンは4を予定している話。&lt;br&gt;
既に&lt;code&gt;@angular/router&lt;/code&gt;がv3であるため、合わせるためにv4へあげる。&lt;br&gt;
2017年3月にリリースする予定&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;performance-calendar-»-prefer-defer-over-async&quot;&gt;Performance Calendar » Prefer DEFER Over ASYNC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://calendar.perfplanet.com/2016/prefer-defer-over-async/&quot; title=&quot;Performance Calendar » Prefer DEFER Over ASYNC&quot;&gt;calendar.perfplanet.com/2016/prefer-defer-over-async/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;browser&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;deferとasync属性について。 どちらもHTMLパースのブロックはしないが、レンダリングのブロックは発生する。&lt;br&gt;
deferは常にdomInteractiveが起きてから実行するため一定、しかしasyncはダウンロード速度によってはメインと被ることもある。&lt;br&gt;
メインコンテンツに関係ないレンダリングを行うスクリプトはdefer属性を試すことで、メインのレンダリングが邪魔されずに進むかを確認した方が良いという話。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascript-clean-coding-best-practices-|-@risingstack&quot;&gt;JavaScript Clean Coding Best Practices | @RisingStack&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&quot; title=&quot;JavaScript Clean Coding Best Practices | @RisingStack&quot;&gt;blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;読みやすいJavaScriptのコードを書くためのプラクティス&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;writing-declaration-files-for-@types-|-typescript&quot;&gt;Writing Declaration Files for @types | TypeScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/2016/12/14/writing-dts-files-for-types/&quot; title=&quot;Writing Declaration Files for @types | TypeScript&quot;&gt;blogs.msdn.microsoft.com/typescript/2016/12/14/writing-dts-files-for-types/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;TypeScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TypeSriptのDefinitelyTyped向けに型定義ファイルを書く方法について&lt;br&gt;
手で書く方法とdts-genを使う方法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;実況中継シリーズ-vue.jsで実現するmvvmパターン-fluxアーキテクチャとの距離---re.ra.ku-アドベントカレンダー-day-13---re.ra.ku-tech-blog&quot;&gt;実況中継シリーズ Vue.jsで実現するMVVMパターン Fluxアーキテクチャとの距離 - Re.Ra.Ku アドベントカレンダー day 13 - Re.Ra.Ku tech blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://techblog.reraku.co.jp/entry/2016/12/13/080000&quot; title=&quot;実況中継シリーズ Vue.jsで実現するMVVMパターン Fluxアーキテクチャとの距離 - Re.Ra.Ku アドベントカレンダー day 13 - Re.Ra.Ku tech blog&quot;&gt;techblog.reraku.co.jp/entry/2016/12/13/080000&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;MVC&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Flux&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;MVVMとFluxのアーキテクチャに似ている部分と異なる部分について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;survivejs---inferno---blazing-fast,-react-like-ui-library---interview-with-dominic-gannaway&quot;&gt;SurviveJS - Inferno - Blazing fast, React-like UI library - Interview with Dominic Gannaway&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://survivejs.com/blog/inferno-interview/&quot; title=&quot;SurviveJS - Inferno - Blazing fast, React-like UI library - Interview with Dominic Gannaway&quot;&gt;survivejs.com/blog/inferno-interview/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ReactライクなVirtual DOMを使ったUIライブラリであるInfernoの特徴について。&lt;br&gt;
どのような仕組みで動いているのか、Reactなどとの違いについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-inner-workings-of-virtual-dom-–-medium&quot;&gt;The Inner Workings Of Virtual DOM – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf&quot; title=&quot;The Inner Workings Of Virtual DOM – Medium&quot;&gt;medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;VirtualDOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;(Preactの)Virtual DOMがどのような処理を経てレンダリングされているのかを追った記事。&lt;br&gt;
Virtual DOMの最適化処理についてなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;cross-browser-html5-form-validation-is-finally-here!-now-what?--telerik-developer-network&quot;&gt;Cross-Browser HTML5 Form Validation is Finally Here! Now What? -Telerik Developer Network&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.telerik.com/topics/web-development/cross-browser-html5-form-validation-finally-now/&quot; title=&quot;Cross-Browser HTML5 Form Validation is Finally Here! Now What? -Telerik Developer Network&quot;&gt;developer.telerik.com/topics/web-development/cross-browser-html5-form-validation-finally-now/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;HTML5&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;HTML5 Form Validation APIについて。&lt;br&gt;
WebKitもサポートしたので、すべてのブラウザで利用できるようになった&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;スライド、動画関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;professor-frisby-introduces-composable-functional-javascript---course-by-@drboolean-@eggheadio&quot;&gt;Professor Frisby Introduces Composable Functional JavaScript - Course by @drboolean @eggheadio&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://egghead.io/courses/professor-frisby-introduces-function-composition&quot; title=&quot;Professor Frisby Introduces Composable Functional JavaScript - Course by @drboolean @eggheadio&quot;&gt;egghead.io/courses/professor-frisby-introduces-function-composition&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;関数型プログラミング&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptでのFunctionalプログラミングについてのスクリーンキャスト。&lt;br&gt;
Either的な実装やカリー化などについて解説してる&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;vue.js-fundamentals---youtube&quot;&gt;Vue.js Fundamentals - YouTube&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLwAKR305CRO_1yAao-8aZiQnBqJeyng4O&quot; title=&quot;Vue.js Fundamentals - YouTube&quot;&gt;www.youtube.com/playlist?list=PLwAKR305CRO_1yAao-8aZiQnBqJeyng4O&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;video&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vue.js 2.0のチュートリアル動画&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ecmascript:-latest-and-upcoming-features-//-speaker-deck&quot;&gt;ECMAScript: latest and upcoming features // Speaker Deck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/rauschma/ecmascript-latest-and-upcoming-features&quot; title=&quot;ECMAScript: latest and upcoming features // Speaker Deck&quot;&gt;speakerdeck.com/rauschma/ecmascript-latest-and-upcoming-features&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;slide&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ES2016/ES2017と今Stage 3であるProposalについての紹介スライド&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;npm-desktop-manager&quot;&gt;Npm Desktop Manager&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://720kb.github.io/ndm/&quot; title=&quot;Npm Desktop Manager&quot;&gt;720kb.github.io/ndm/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;GUI&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;npmのパッケージを管理するGUIアプリケーション&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;date-fns/date-fns:-⏳-modern-javascript-date-utility-library-⌛️&quot;&gt;date-fns/date-fns: ⏳ Modern JavaScript date utility library ⌛️&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/date-fns/date-fns&quot; title=&quot;date-fns/date-fns: ⏳ Modern JavaScript date utility library ⌛️&quot;&gt;github.com/date-fns/date-fns&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Date周りの操作を提供するライブラリ。&lt;br&gt;
lodashのように利用する関数だけを取り出して使えるようにするのが目的となってる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/date-fns/date-fns/issues/275#issuecomment-264934189&quot; title=&quot;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&quot;&gt;Add a brief comparison with Moment.js? · Issue #275 · date-fns/date-fns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;simple-statistics/simple-statistics:-simple-statistics-for-node-&amp;amp;-browser-javascript&quot;&gt;simple-statistics/simple-statistics: simple statistics for node &amp;amp; browser javascript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/simple-statistics/simple-statistics&quot; title=&quot;simple-statistics/simple-statistics: simple statistics for node &amp;amp; browser javascript&quot;&gt;github.com/simple-statistics/simple-statistics&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;統計&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;統計的な関数のコレクションライブラリ。&lt;br&gt;
Pythonのsimplestatisticsのport。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sheriferson/simplestatistics&quot; title=&quot;sheriferson/simplestatistics: Simple statistical functions implemented in readable Python.&quot;&gt;sheriferson/simplestatistics: Simple statistical functions implemented in readable Python.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 20 Dec 2016 10:38:00 +0900</pubDate>
        <link>https://jser.info/2016/12/20/rxjs-v5-angular-date-fns/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/20/rxjs-v5-angular-date-fns/</guid>
        
        <category>Rx</category>
        
        <category>Angular</category>
        
        <category>Date</category>
        
        <category>library</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2017年1月15日(日)に JSer.info 6周年 &amp;&amp; 300回目記念イベント を開催します</title>
        <description>&lt;p&gt;2017年1月15日(日)にJSer.infoの6周年記念イベントをやります。&lt;br&gt;
(&lt;a href=&quot;https://jser.info/2016/10/10/300posts/&quot; title=&quot;300回目&quot;&gt;300回目&lt;/a&gt;記念はやってなかったのでついでです)&lt;/p&gt;

&lt;p&gt;次のイベントページから参加を申し込むことができます。&lt;br&gt;
申し込み開始は、2016/12/15(木) 21:00からです(抽選)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント - connpass&quot;&gt;JSer.info 6周年と300回記念イベント - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;発表枠&quot;&gt;発表枠&lt;/h3&gt;

&lt;p&gt;5-20分程度の発表をしてくれる人を募集しています。&lt;br&gt;
テーマはJavaScriptであれば問題ありません。&lt;/p&gt;

&lt;p&gt;発表枠で申し込んだ方は、発表時間やテーマなどを次のIssueなどで伝えてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot;&gt;JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Q&amp;amp;A&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. 30分以上の発表がしたい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot;&gt;応相談&lt;/a&gt;。他の発表枠次第ですが可能です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. どのくらいのレベルの参加者を想定した内容にすればいいの?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;基本的に全力でやってもらえればいいです。&lt;br&gt;
自分が勝手に補足を入れるので遠慮は不要です。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. どんなテーマならいいの?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScriptであればいい気がします。&lt;br&gt;
参考までに前回のイベントでの発表内容は次のページにまとまっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2016/01/16/jser-5years/&quot;&gt;JSer.info 5周年記念イベントを開催しました - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.info/2014/11/02/jser200/&quot;&gt;JSer.info 200回記念イベントを開催しました - JSer.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JSer.infoに載っていそうなテーマ(JavaScriptやウェブ)からかけ離れてなければ良いです。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. 初心者向けの内容でもいいの?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;問題ありません。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. 商業的な宣伝をメインにしたトーク&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ダメ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q. LTしたい&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ご自由にどうぞ。&lt;br&gt;
JavaScript Discussion後に懇談会を行う予定です。&lt;br&gt;
そのタイミングで自由にできます。&lt;/p&gt;

&lt;h3 id=&quot;書記枠&quot;&gt;書記枠&lt;/h3&gt;

&lt;p&gt;「書記枠」という変な枠もあります。&lt;/p&gt;

&lt;p&gt;自分がいつもやっているような&lt;a href=&quot;http://efcl.info/tags/?q=%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88&quot;&gt;アウトラインメモ&lt;/a&gt;を&lt;a href=&quot;http://etherpad.org/&quot; title=&quot;Etherpad&quot;&gt;Etherpad&lt;/a&gt;などを使って書くのを手伝ってくれる人の枠です。&lt;br&gt;
(司会業やってないときは自分もやります)&lt;/p&gt;

&lt;p&gt;当日リアルタイムで見れるようにして、文書ベースのデータがあると議論/質疑がしやすくなるかを試したいので、「書記枠」を用意しました。&lt;/p&gt;

&lt;p&gt;「書記枠」で申し込んでも、ずっと書いてないといけないわけでもないので、基本的にイベントの参加を優先していいです。&lt;/p&gt;

&lt;h3 id=&quot;javascript-discussion&quot;&gt;JavaScript Discussion&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://jser.info/2016/01/16/jser-5years/&quot; title=&quot;JSer.info 5周年記念イベント&quot;&gt;JSer.info 5周年記念イベント&lt;/a&gt;に来たことがある人はわかると思いますが、質問を集めたDiscussionボードを見ながら議論するコーナーです。&lt;/p&gt;

&lt;p&gt;次の場所に質問、聞きたいこと、話したいこと、主張を書き込むことができます。&lt;br&gt;
当日も時間を取りますが、事前に書いてもらっても問題ありません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.sli.do/event/bkry5ojl/ask&quot; title=&quot;JSer.info 6周年 - JavaScript Discussion&quot;&gt;JSer.info 6周年 - JavaScript Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;去年のDiscussionボードの様子:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://app.sli.do/event/0egbwyxz/ask&quot;&gt;&lt;img src=&quot;https://monosnap.com/file/z2VC0MmCQKox5DjQXlvOpNaYQjVhum.png&quot; alt=&quot;JavaScript Discussion(JavaScriptの良い所/悪い所/気になる事)&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;他にも、この人と話しあいたいとかあったらお知らせください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント - connpass&quot;&gt;JSer.info 6周年と300回記念イベント - connpass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot; title=&quot;JSer.info 6周年 &amp;amp;amp;&amp;amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&quot;&gt;JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 09:26:00 +0900</pubDate>
        <link>https://jser.info/2016/12/13/announcement-jser-info-6years-event/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/13/announcement-jser-info-6years-event/</guid>
        
        <category>イベント</category>
        
        <category>JSer</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>雑記</category>
        
      </item>
    
      <item>
        <title>2016-12-12のJS: Chrome 56β、Babelの過去と現在と未来</title>
        <description>&lt;p&gt;JSer.info #309 - Chrome 56βがリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.chromium.org/2016/12/chrome-56-beta-not-secure-warning-web.html&quot; title=&quot;Chromium Blog: Chrome 56 Beta: “Not Secure” warning, Web Bluetooth, and CSS position: sticky&quot;&gt;Chromium Blog: Chrome 56 Beta: “Not Secure” warning, Web Bluetooth, and CSS position: sticky&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS &lt;code&gt;position: sticky&lt;/code&gt;の有効化、WebGL 2.0のサポート、FlashのClick to Playがデフォルト化、CSS Fontsの&lt;code&gt;system-ui&lt;/code&gt;をサポート、SHA-1の対応終了などが含まれています。&lt;/p&gt;

&lt;p&gt;HTML5 by default(いわゆるFlashのClick to playのデフォルト化)はChrome55で予定されていましたが、56からに変更されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.chromium.org/2016/12/roll-out-plan-for-html5-by-default.html&quot; title=&quot;Chromium Blog: Roll-out plan for HTML5 by Default&quot;&gt;Chromium Blog: Roll-out plan for HTML5 by Default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/flash-roadmap#TOC-HTML5-By-Default-Target:-Chrome-55---Dec-2016-&quot; title=&quot;Flash Roadmap - The Chromium Projects&quot;&gt;Flash Roadmap - The Chromium Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同様の変更がFirefoxでも2017年中に行われる予定です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fxsitecompat.com/ja/docs/2016/flash-content-will-be-click-to-activate-in-2017/&quot; title=&quot;Flash コンテンツは 2017 年中に「クリックして有効化」となります | Firefox サイト互換性情報&quot;&gt;Flash コンテンツは 2017 年中に「クリックして有効化」となります | Firefox サイト互換性情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、SHA-1証明書についてChromeは56で、Firefox 51(2017年1月リリース)、IE11とMSEdgeは2017年2月のリリースでそれぞれ無効化されます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fxsitecompat.com/ja/docs/2016/sha-1-certificates-issued-by-public-ca-will-no-longer-be-accepted/&quot;&gt;公的認証局によって発行された SHA-1 証明書は受け入れられなくなります (影響あり) | Firefox サイト互換性情報&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/jpsecurity/2015/11/02/faq-sha-1-sha-2/&quot;&gt;FAQ: SHA-1 廃止/SHA-2 移行に関するマイクロソフトのポリシー – 日本のセキュリティチーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://social.technet.microsoft.com/wiki/contents/articles/32288.windows-enforcement-of-sha1-certificates.aspx&quot;&gt;Windows Enforcement of SHA1 Certificates - TechNet Articles - United States (English) - TechNet Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://googledevjp.blogspot.jp/2016/11/sha-1-certificates-in-chrome.html?m=1&quot; title=&quot;Google Developers Japan: Chrome の SHA-1 証明書&quot;&gt;Google Developers Japan: Chrome の SHA-1 証明書&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.developer.apple.com/thread/65399&quot; title=&quot;MacOS &amp;amp;amp; Safari SHA-1 deprecation policy ? | Apple Developer Forums&quot;&gt;MacOS &amp;amp; Safari SHA-1 deprecation policy ? | Apple Developer Forums&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SHA-1証明書のサポートが終了するとどうなるのかは、次のサイトがよくまとまっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cybertrust.ne.jp/sureserver/productinfo/sha1ms.html&quot; title=&quot;SSLサーバー証明書 : SHA-1 証明書の受付終了と SHA-2 証明書への移行について｜Cybertrust.ne.jp&quot;&gt;SSLサーバー証明書 : SHA-1 証明書の受付終了と SHA-2 証明書への移行について｜Cybertrust.ne.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/blog/2016/12/07/the-state-of-babel&quot; title=&quot;The State of Babel · Babel&quot;&gt;The State of Babel · Babel&lt;/a&gt;では、Babelの歴史や現在、また今後のロードマップについて書かれています。&lt;/p&gt;

&lt;p&gt;Babel版Autoprefixerである&lt;a href=&quot;https://github.com/babel/babel-preset-env&quot; title=&quot;babel-preset-env&quot;&gt;babel-preset-env&lt;/a&gt;や、&lt;a href=&quot;https://github.com/babel/babili&quot; title=&quot;babili&quot;&gt;babili&lt;/a&gt;のリリース。&lt;br&gt;
プラグインエコシステムやドキュメントの整備や課題などについて書かれています。&lt;/p&gt;

&lt;p&gt;また、今後のロードマップやBabelのコミュニティについて書かれています。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;JSer.infoの6周年イベントのイベントページを公開しました。&lt;br&gt;
募集開始は2016/12/15(木) 21:00 〜 からとなっています(抽選)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jser.connpass.com/event/46997/&quot; title=&quot;JSer.info 6周年と300回記念イベント - connpass&quot;&gt;JSer.info 6周年と300回記念イベント - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、5-20分の発表枠を設けています。&lt;br&gt;
JavaScriptについて発表したいことがある人は「発表枠」で申し込んでください。&lt;br&gt;
発表枠以外でも自由に発表できる時間はあるので、スライドを隠し持っていると良いです。&lt;/p&gt;

&lt;p&gt;書記枠という変な枠もあります。&lt;br&gt;
自分がいつもやっているような&lt;a href=&quot;http://efcl.info/tags/?q=%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88&quot;&gt;アウトラインメモ&lt;/a&gt;を&lt;a href=&quot;http://etherpad.org/&quot; title=&quot;Etherpad&quot;&gt;Etherpad&lt;/a&gt;などを使って書くのを手伝ってくれる人の枠です。&lt;br&gt;
(司会業やってないときは自分もやります)&lt;br&gt;
当日リアルタイムで見れるようにして、文書ベースのデータがあると議論/質疑がしやすくなるかを試したいので作りました。&lt;/p&gt;

&lt;p&gt;募集開始は2016/12/15(木)からですが、気になる人は申し込んでみてください。&lt;/p&gt;

&lt;h2 id=&quot;詳細は2017年1月15日(日)に-jser.info-6周年-&amp;amp;&amp;amp;-300回目記念イベント-を開催します---jser.infoを見てください。&quot;&gt;詳細は&lt;a href=&quot;https://jser.info/2016/12/13/announcement-jser-info-6years-event/&quot; title=&quot;2017年1月15日(日)に JSer.info 6周年 &amp;amp;amp;&amp;amp;amp; 300回目記念イベント を開催します - JSer.info&quot;&gt;2017年1月15日(日)に JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント を開催します - JSer.info&lt;/a&gt;を見てください。&lt;/h2&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;chromium-blog:-chrome-56-beta:-“not-secure”-warning,-web-bluetooth,-and-css-position:-sticky&quot;&gt;Chromium Blog: Chrome 56 Beta: “Not Secure” warning, Web Bluetooth, and CSS position: sticky&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.chromium.org/2016/12/chrome-56-beta-not-secure-warning-web.html&quot; title=&quot;Chromium Blog: Chrome 56 Beta: “Not Secure” warning, Web Bluetooth, and CSS position: sticky&quot;&gt;blog.chromium.org/2016/12/chrome-56-beta-not-secure-warning-web.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Chrome 56βリリース。&lt;br&gt;
Web Bluetooth APIがデフォルトで有効化、CSS &lt;code&gt;position: sticky&lt;/code&gt;の有効化、WebGL 2.0、FlashのClick to Playがデフォルト化、CSS Fontsの&lt;code&gt;system-ui&lt;/code&gt;をサポート、SHA-1の対応終了など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.chromium.org/2016/12/roll-out-plan-for-html5-by-default.html&quot; title=&quot;Chromium Blog: Roll-out plan for HTML5 by Default&quot;&gt;Chromium Blog: Roll-out plan for HTML5 by Default&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/flash-roadmap#TOC-HTML5-By-Default-Target:-Chrome-55---Dec-2016-&quot; title=&quot;Flash Roadmap - The Chromium Projects&quot;&gt;Flash Roadmap - The Chromium Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/hvN9YVvIb5c/5DrcunKSCAAJ&quot; title=&quot;Intent to Implement and Ship: The “system-ui” generic font family - Google グループ&quot;&gt;Intent to Implement and Ship: The “system-ui” generic font family - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cybertrust.ne.jp/sureserver/productinfo/sha1ms.html&quot; title=&quot;SSLサーバー証明書 : SHA-1 証明書の受付終了と SHA-2 証明書への移行について｜Cybertrust.ne.jp&quot;&gt;SSLサーバー証明書 : SHA-1 証明書の受付終了と SHA-2 証明書への移行について｜Cybertrust.ne.jp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;microsoft-edge-build-14986-changelog---microsoft-edge-development&quot;&gt;Microsoft Edge build 14986 changelog - Microsoft Edge Development&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/changelog/desktop/14986/&quot; title=&quot;Microsoft Edge build 14986 changelog - Microsoft Edge Development&quot;&gt;developer.microsoft.com/en-us/microsoft-edge/platform/changelog/desktop/14986/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;MSEdge&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;MSEdge build 14986リリース。&lt;br&gt;
CSS Custom Property、IntersectionObserverのサポート。&lt;br&gt;
Fetchをフラグ付きでサポート、async/awaitをデフォルトで有効に&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-for-safari-technology-preview-19-|-webkit&quot;&gt;Release Notes for Safari Technology Preview 19 | WebKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7093/release-notes-for-safari-technology-preview-19/&quot; title=&quot;Release Notes for Safari Technology Preview 19 | WebKit&quot;&gt;webkit.org/blog/7093/release-notes-for-safari-technology-preview-19/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Safari Technology Preview Release 19リリース。&lt;br&gt;
ES6 modulesのサポート、Touch Barのサポート、Pointer Lock APIの有効化、WebDriver時は&lt;code&gt;navigator.webdriver&lt;/code&gt;が触れるようになるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;announcing-typescript-2.1-|-typescript&quot;&gt;Announcing TypeScript 2.1 | TypeScript&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/2016/12/07/announcing-typescript-2-1/&quot; title=&quot;Announcing TypeScript 2.1 | TypeScript&quot;&gt;blogs.msdn.microsoft.com/typescript/2016/12/07/announcing-typescript-2-1/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;TypeScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TypeScript 2.1リリース。&lt;br&gt;
async/await、Object Rest &amp;amp; Spread、&lt;code&gt;keyof&lt;/code&gt; type、Mapped Typeのサポートなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/vvakame/items/fc7e37d0296c63f41f4f&quot; title=&quot;TypeScript 2.1.4 変更点 - Qiita&quot;&gt;TypeScript 2.1.4 変更点 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;angular-2.3.0-now-available&quot;&gt;Angular 2.3.0 Now Available&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://angularjs.blogspot.com/2016/12/angular-230-now-available.html&quot; title=&quot;Angular 2.3.0 Now Available&quot;&gt;angularjs.blogspot.com/2016/12/angular-230-now-available.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Angular 2.3.0リリース。&lt;br&gt;
IDEなどと連携する向けにAngular Language Serviceをリリース、zone.jsのスタックトレースが分かりやすくなるように改善されるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;testcafe-v0.11.0-released-|-testcafe&quot;&gt;TestCafe v0.11.0 Released | TestCafe&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://devexpress.github.io/testcafe/blog/testcafe-v0-11-0-released.html&quot; title=&quot;TestCafe v0.11.0 Released | TestCafe&quot;&gt;devexpress.github.io/testcafe/blog/testcafe-v0-11-0-released.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TestCafe v0.11.0リリース。&lt;br&gt;
Selectorの仕組みを変更、built-in assertionの追加、ブラウザに起動引数をわたせるように&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-7.1.0-·-developit/preact&quot;&gt;Release 7.1.0 · developit/preact&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/developit/preact/releases/tag/7.1.0&quot; title=&quot;Release 7.1.0 · developit/preact&quot;&gt;github.com/developit/preact/releases/tag/7.1.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;小さなReactライクなライブラリであるPreact 7.1.0リリース。&lt;br&gt;
初期レンダリングの高速化など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;parse5&quot;&gt;parse5&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://inikulin.github.io/parse5/#3-0-0&quot; title=&quot;parse5&quot;&gt;inikulin.github.io/parse5/#3-0-0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;HTML&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;HTMLパーサであるparse5 3.0.0リリース。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-2.1.0-·-qunitjs/qunit&quot;&gt;Release 2.1.0 · qunitjs/qunit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/qunitjs/qunit/releases/tag/2.1.0&quot; title=&quot;Release 2.1.0 · qunitjs/qunit&quot;&gt;github.com/qunitjs/qunit/releases/tag/2.1.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;QUnit 2.1.0リリース。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-kitt-·-sass/libsass&quot;&gt;Release KITT · sass/libsass&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sass/libsass/releases/tag/3.4.0&quot; title=&quot;Release KITT · sass/libsass&quot;&gt;github.com/sass/libsass/releases/tag/3.4.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Sass&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;LibSass 3.4リリース&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-state-of-babel-·-babel&quot;&gt;The State of Babel · Babel&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/blog/2016/12/07/the-state-of-babel&quot; title=&quot;The State of Babel · Babel&quot;&gt;babeljs.io/blog/2016/12/07/the-state-of-babel&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;babel&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Babelの現状について。&lt;br&gt;
babel-preset-env、babili、コードカバレッジやプラグインエコシステム、ドキュメント、今後のロードマップについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;今年のうちに対応したい、node.jsのbufferに潜む危険性---yahoo!-japan-tech-blog&quot;&gt;今年のうちに対応したい、Node.jsのBufferに潜む危険性 - Yahoo! JAPAN Tech Blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://techblog.yahoo.co.jp/advent-calendar-2016/node_new_buffer/&quot; title=&quot;今年のうちに対応したい、Node.jsのBufferに潜む危険性 - Yahoo! JAPAN Tech Blog&quot;&gt;techblog.yahoo.co.jp/advent-calendar-2016/node_new_buffer/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;security&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsの&lt;code&gt;new Buffer&lt;/code&gt;のセキュリティ的な問題点についての解説。&lt;br&gt;
非推奨となった&lt;code&gt;new Buffer&lt;/code&gt;の代わりとなる&lt;code&gt;Buffer.from&lt;/code&gt;/&lt;code&gt;Buffer.alloc&lt;/code&gt;/&lt;code&gt;Buffer.allocUnsafe&lt;/code&gt;について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md&quot; title=&quot;notes/Lets-fix-Buffer-API.md at master · ChALkeR/notes&quot;&gt;notes/Lets-fix-Buffer-API.md at master · ChALkeR/notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;node.js-v7-has-updated-v8-to-5.4-|-node.js&quot;&gt;Node.js v7 has updated V8 to 5.4 | Node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/blog/community/update-v8-5.4/&quot; title=&quot;Node.js v7 has updated V8 to 5.4 | Node.js&quot;&gt;nodejs.org/en/blog/community/update-v8-5.4/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;V8&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.js v7で使えるようになったECMAScriptの機能や改善点について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;variable-fontについて---console.blog(self);&quot;&gt;Variable Fontについて - console.blog(self);&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://sadah.hatenablog.com/entry/variablefont&quot; title=&quot;Variable Fontについて - console.blog(self);&quot;&gt;sadah.hatenablog.com/entry/variablefont&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;fonts&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Variable Fontの確認方法や仕様について。&lt;br&gt;
どのようにフォントの設定をCSSから変更するかについて。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;vue.js-vueコンポーネントのユニットテストを書いてみよう---qiita&quot;&gt;Vue.js Vueコンポーネントのユニットテストを書いてみよう - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/potato4d/items/8215941b84c11b845886&quot; title=&quot;Vue.js Vueコンポーネントのユニットテストを書いてみよう - Qiita&quot;&gt;qiita.com/potato4d/items/8215941b84c11b845886&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vueコンポーネントのユニットテストの方法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;how-to-snapshot-test-everything-in-your-redux-app-with-jest-–-medium&quot;&gt;How to Snapshot Test Everything in Your Redux App With Jest – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@jondot/how-to-snapshot-test-everything-in-your-redux-app-with-jest-fde305ebedea&quot; title=&quot;How to Snapshot Test Everything in Your Redux App With Jest – Medium&quot;&gt;medium.com/@jondot/how-to-snapshot-test-everything-in-your-redux-app-with-jest-fde305ebedea&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;redux&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Jestを使ったReactコンポーネントのsnapshotテスト、enzymeを使ったインタラクションテスト、Reduxのreducerのテスト手法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;promise-の-all-と-race-だけで書ける待ち合わせ、書けない待ち合わせ---qiita&quot;&gt;Promise の all と race だけで書ける待ち合わせ、書けない待ち合わせ - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/Kuniwak/items/9ea447598b7652db78b9&quot; title=&quot;Promise の all と race だけで書ける待ち合わせ、書けない待ち合わせ - Qiita&quot;&gt;qiita.com/Kuniwak/items/9ea447598b7652db78b9&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Promises&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Promise.all&lt;/code&gt;と&lt;code&gt;Promise.race&lt;/code&gt;を使った待ち合わせのパターンについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;on-webpack-and-source-map-integration-|-code.art.web&quot;&gt;On Webpack and Source Map integration | Code.Art.Web&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://lorefnon.me/2016/12/03/on-webpack-and-source-map-integration.html&quot; title=&quot;On Webpack and Source Map integration | Code.Art.Web&quot;&gt;lorefnon.me/2016/12/03/on-webpack-and-source-map-integration.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpackの&lt;code&gt;devtool&lt;/code&gt;で指定できるSource Mapオプションについて&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;prigara/javascript-conferences:-list-of-conferences-for-frontend-and-node.js-developers-in-2016&quot;&gt;prigara/javascript-conferences: List of conferences for frontend and Node.js developers in 2016&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/prigara/javascript-conferences&quot; title=&quot;prigara/javascript-conferences: List of conferences for frontend and Node.js developers in 2016&quot;&gt;github.com/prigara/javascript-conferences&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;イベント&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JavaScriptのカンファレンスをまとめているリポジトリ&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;andywer/webpack-blocks:-📦-configure-webpack-using-functional-feature-blocks.&quot;&gt;andywer/webpack-blocks: 📦 Configure webpack using functional feature blocks.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/andywer/webpack-blocks&quot; title=&quot;andywer/webpack-blocks: 📦 Configure webpack using functional feature blocks.&quot;&gt;github.com/andywer/webpack-blocks&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpackの設定を関数で書くことができるモジュール&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 10:14:00 +0900</pubDate>
        <link>https://jser.info/2016/12/12/chrome-56b-babel/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/12/chrome-56b-babel/</guid>
        
        <category>Chrome</category>
        
        <category>Firefox</category>
        
        <category>Babel</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2016-12-06のJS: Ember.js 2.10、Front-End Tooling 2016アンケート、Svelte</title>
        <description>&lt;p&gt;JSer.info #308 - Ember.js &lt;a href=&quot;https://github.com/emberjs/ember.js/releases/tag/v2.10.0&quot; title=&quot;v2.10.0&quot;&gt;v2.10.0&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://emberjs.com/blog/2016/11/30/ember-2-10-released.html&quot; title=&quot;Ember.js - Ember 2.10 and 2.11 Beta Released&quot;&gt;Ember.js - Ember 2.10 and 2.11 Beta Released&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ember.js v2.10では、&lt;a href=&quot;http://emberjs.com/blog/2016/07/29/announcing-the-glimmer-2-alpha.html&quot; title=&quot;Glimmer 2&quot;&gt;7月にα版が出ていたGlimmer 2&lt;/a&gt;が正規式に統合されています。これにより、パフォーマンスやファイルサイズが改善されています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;drop-in, completely backwards compatible upgrade for virtually all Ember.js users&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;特徴として、既存のものと後方互換性があるため、そのままアップグレードできるようになっています。&lt;/p&gt;

&lt;p&gt;合わせて次の記事も見てみるといいかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://madhatted.com/2016/11/30/5-things-to-know-about-ember-2-10-and-glimmer-2&quot; title=&quot;5 Things to Know About Ember 2.10 and Glimmer 2 :: madhatted.com&quot;&gt;5 Things to Know About Ember 2.10 and Glimmer 2 :: madhatted.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results&quot; title=&quot;The State of Front-End Tooling 2016 - Results&quot;&gt;The State of Front-End Tooling 2016 - Results&lt;/a&gt;では、フロントエンドのツールやライブラリなどに関するアンケート結果が公開されています。&lt;/p&gt;

&lt;p&gt;去年も行われているので、去年の結果との比較も掲載されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2015-results&quot; title=&quot;The State of Front-End Tooling – 2015&quot;&gt;The State of Front-End Tooling – 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次の項目についてそれぞれアンケート結果がまとめられています。&lt;br&gt;
認知度、利用率、満足度に関する結果が書かれています。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#experience-general&quot;&gt;General Front-end Experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#knowledge-css&quot;&gt; CSS Knowledge Levels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#css-processors&quot;&gt;CSS Processor Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#css-processor-experience&quot;&gt;CSS Processor Experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#css-naming&quot;&gt;CSS Naming Schemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#css-linting&quot;&gt;CSS Linting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#css-tool-experience&quot;&gt;CSS Tool Experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#css-methodologies&quot;&gt;CSS Methodologies and Naming Scheme Experience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#css-tool-usage&quot;&gt;CSS Tool Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-knowledge&quot;&gt;JavaScript Knowledge Levels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-task-runners&quot;&gt;Task Runners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-frameworks&quot;&gt;Knowledge of JavaScript Libraries and Frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-framework-usage&quot;&gt;Most frequently used JS tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-framework-essential&quot;&gt;Most essential JS tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-bundlers&quot;&gt;JavaScript Module Bundlers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-transpilers&quot;&gt;JavaScript Transpilers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-linters&quot;&gt;JavaScript Linting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-testing&quot;&gt;JavaScript Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results#js-misc&quot;&gt;Miscellaneous Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://svelte.technology/&quot; title=&quot;Svelte&quot;&gt;Svelte&lt;/a&gt;というUIフレームワーク/ツールが公開されています。&lt;br&gt;
作者は&lt;a href=&quot;http://www.ractivejs.org/&quot; title=&quot;Ractive.js&quot;&gt;Ractive.js&lt;/a&gt;や&lt;a href=&quot;https://github.com/rollup/rollup&quot; title=&quot;rollup&quot;&gt;rollup&lt;/a&gt;の @&lt;a href=&quot;https://github.com/Rich-Harris&quot; title=&quot;Rich-Harris&quot;&gt;Rich-Harris&lt;/a&gt; さんです。&lt;/p&gt;

&lt;p&gt;よくあるコンポーネント志向のフレームワークですが、特徴として&lt;a href=&quot;https://github.com/sveltejs/svelte-cli&quot; title=&quot;svelte-cli&quot;&gt;svelte-cli&lt;/a&gt;で変換すると、ただのDOM APIを使った単体のJavaScriptコードとなります。&lt;br&gt;
この単体のJavaScriptコード(&lt;em&gt;widget&lt;/em&gt;と呼ばれてます)は、単独で動作するため、別途ランタイムとなるコードをロードする必要がありません。&lt;/p&gt;

&lt;p&gt;HTML(テンプレート/JS/CSSを書いたもの)をjsファイルに変換すると、&lt;em&gt;widget&lt;/em&gt;のESモジュールが生成されます。&lt;br&gt;
この&lt;em&gt;widget&lt;/em&gt;を使ったJavaScriptをRollupやwebpackなどでビルドしてブラウザで表示します。&lt;/p&gt;

&lt;p&gt;オンライン&lt;a href=&quot;https://svelte.technology/repl/&quot;&gt;REPL&lt;/a&gt;を見てみるとどのような変換が行われているかを見ることができます。&lt;/p&gt;

&lt;p&gt;ポータブルなUIモジュールを作る場合などに、このような仕組みがあると役に立つような気がします。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;引き続き、&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot; title=&quot;JSer.info 6周年 &amp;amp;amp;&amp;amp;amp; 300回目記念イベント @ 1月15日(日) #89&quot;&gt;JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント @ 1月15日(日) #89&lt;/a&gt;でやりたいことを募集しています。&lt;br&gt;
「〜について発表したい」とかを先行して書いていっても良いです。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;ember.js---ember-2.10-and-2.11-beta-released&quot;&gt;Ember.js - Ember 2.10 and 2.11 Beta Released&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.com/blog/2016/11/30/ember-2-10-released.html&quot; title=&quot;Ember.js - Ember 2.10 and 2.11 Beta Released&quot;&gt;emberjs.com/blog/2016/11/30/ember-2-10-released.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ember 2.10リリース。&lt;br&gt;
Glimmer 2を含んだ初のリリース。&lt;br&gt;
既存の仕組みと後方互換性を持っているため、そのままアップグレードが可能となっている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://emberjs.com/blog/2016/07/29/announcing-the-glimmer-2-alpha.html&quot; title=&quot;Ember.js - Announcing The Glimmer 2 Alpha&quot;&gt;Ember.js - Announcing The Glimmer 2 Alpha&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;v8-javascript-engine:-v8-release-5.6&quot;&gt;V8 JavaScript Engine: V8 Release 5.6&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://v8project.blogspot.com/2016/12/v8-release-56.html&quot; title=&quot;V8 JavaScript Engine: V8 Release 5.6&quot;&gt;v8project.blogspot.com/2016/12/v8-release-56.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;V8&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;V8 5.6リリース。&lt;br&gt;
ES2015のパフォーマンス改善、&lt;code&gt;String#padStart&lt;/code&gt;と&lt;code&gt;String#padEnd&lt;/code&gt;の実装など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;chrome-releases:-stable-channel-update-for-desktop&quot;&gt;Chrome Releases: Stable Channel Update for Desktop&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://googlechromereleases.blogspot.com/2016/12/stable-channel-update-for-desktop.html&quot; title=&quot;Chrome Releases: Stable Channel Update for Desktop&quot;&gt;googlechromereleases.blogspot.com/2016/12/stable-channel-update-for-desktop.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;Chrome&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Chrome 55リリース。&lt;br&gt;
Pointer Event、async/await、Persistent Storageなど。&lt;br&gt;
HTML5 by Default(Flashのデフォルトブロック)はChrome 56に延期した。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OC7tgJP1D4s&quot; title=&quot;Chrome 55: Async and Await, Pointer Events, Persistent Storage and more - YouTube&quot;&gt;Chrome 55: Async and Await, Pointer Events, Persistent Storage and more - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.chromium.org/2016/10/chrome-55-beta-input-handling.html&quot; title=&quot;Chromium Blog: Chrome 55 Beta: Input handling improvements and async/await functions&quot;&gt;Chromium Blog: Chrome 55 Beta: Input handling improvements and async/await functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!msg/chromium-dev/ad7Posd6cdI/5EEOduWiCwAJ&quot; title=&quot;(Update) Intent to Implement - HTML5 by Default - Google グループ&quot;&gt;(Update) Intent to Implement - HTML5 by Default - Google グループ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-state-of-front-end-tooling-2016---results---ashleynolan.co.uk---blog-and-portfolio-for-ashley-nolan&quot;&gt;The State of Front-End Tooling 2016 - Results - AshleyNolan.co.uk - Blog and Portfolio for Ashley Nolan&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results&quot; title=&quot;The State of Front-End Tooling 2016 - Results - AshleyNolan.co.uk - Blog and Portfolio for Ashley Nolan&quot;&gt;ashleynolan.co.uk/blog/frontend-tooling-survey-2016-results&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;フロントエンド周りのツールやライブラリについてのアンケート結果。&lt;br&gt;
昨年の結果との比較も掲載されている。&lt;br&gt;
PostCSSやnpm scripts利用が増えた、使っているJSライブラリやツールについて&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;javascript-developers:-watch-your-language!---web-standards---bocoup&quot;&gt;JavaScript Developers: Watch Your Language! - Web Standards - Bocoup&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://bocoup.com/weblog/javascript-developers-watch-your-language&quot; title=&quot;JavaScript Developers: Watch Your Language! - Web Standards - Bocoup&quot;&gt;bocoup.com/weblog/javascript-developers-watch-your-language&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;proposal&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ECMAScript ProposalのStageの解説。&lt;br&gt;
Stage段階のものは、Babelなどで簡単に扱えるけど危険性も含んでいるから、TC39での議論は注視する必要がある。&lt;br&gt;
Stage段階のものはExperimentalであることを理解して使おうという話。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;step-by-stepで始めるeslint---qiita&quot;&gt;Step by Stepで始めるESLint - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/howdy39/items/6e2c75861bc5a14b2acf&quot; title=&quot;Step by Stepで始めるESLint - Qiita&quot;&gt;qiita.com/howdy39/items/6e2c75861bc5a14b2acf&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ESLint&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;tutorial&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ESLintの設定をステップ・バイ・ステップで行うチュートリアル&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;一から始めるjavascriptユニットテスト---hatena-developer-blog&quot;&gt;一から始めるJavaScriptユニットテスト - Hatena Developer Blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.hatenastaff.com/entry/2016/12/05/102351&quot; title=&quot;一から始めるJavaScriptユニットテスト - Hatena Developer Blog&quot;&gt;developer.hatenastaff.com/entry/2016/12/05/102351&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;slide&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;MochaをNode.jsで動くユニットテストから、Karmaを使いブラウザで動かすDOMのテストするまでをPull Request毎に解説してる。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;新しめのcss設計まとめ-〜2016年冬〜---qiita&quot;&gt;新しめのCSS設計まとめ 〜2016年冬〜 - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/usagi-f/items/dc719a8fd18abcdee4df&quot; title=&quot;新しめのCSS設計まとめ 〜2016年冬〜 - Qiita&quot;&gt;qiita.com/usagi-f/items/dc719a8fd18abcdee4df&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;設計&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CSSの色々なアーキテクチャについての紹介。&lt;br&gt;
OOCSS、BEM、SMACSS、APBCSS(Atomic Design)、MOCSS、ECSS、ITCSSなど。&lt;br&gt;
それぞれを簡単にまとめている&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;houdini、それはcssの進化を促すプロジェクト---the-future-starts-today&quot;&gt;Houdini、それはCSSの進化を促すプロジェクト - The future starts today&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://shibe97.hatenablog.com/entry/2016/12/05/083000&quot; title=&quot;Houdini、それはCSSの進化を促すプロジェクト - The future starts today&quot;&gt;shibe97.hatenablog.com/entry/2016/12/05/083000&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;spec&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CSSのHoudiniについて。&lt;br&gt;
CSSの低レベルAPIにJavaScriptからアクセスできるようにする仕様で、現在どのような仕様が考えられているかについてなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;レガシーシステム上のjavascriptをモダンビルドにしていくwebpack利用実例---qiita&quot;&gt;レガシーシステム上のJavaScriptをモダンビルドにしていくwebpack利用実例 - Qiita&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/inuscript/items/97333a239c97094c39a6&quot; title=&quot;レガシーシステム上のJavaScriptをモダンビルドにしていくwebpack利用実例 - Qiita&quot;&gt;qiita.com/inuscript/items/97333a239c97094c39a6&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;モジュールではないコードや古いライブラリをどのように現代のツールに載せていくかについて。&lt;br&gt;
モジュール化やwebpackを使ったビルドなどの手法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;react/redux…-where-do-you-start?-–-mofed-–-medium&quot;&gt;React/Redux… Where Do You Start? – MoFed – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/mofed/react-redux-where-do-you-start-500c98413d1f&quot; title=&quot;React/Redux… Where Do You Start? – MoFed – Medium&quot;&gt;medium.com/mofed/react-redux-where-do-you-start-500c98413d1f&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;redux&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React(とRedux)をどこから始めるかについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;8種類あるsvgスプライト-それぞれの特徴を比較してみた---週刊svg&quot;&gt;8種類あるSVGスプライト それぞれの特徴を比較してみた - 週刊SVG&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ssvvgg.net/post/153900731865/8%E7%A8%AE%E9%A1%9E%E3%81%82%E3%82%8Bsvg%E3%82%B9%E3%83%97%E3%83%A9%E3%82%A4%E3%83%88-%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C%E3%81%AE%E7%89%B9%E5%BE%B4%E3%82%92%E6%AF%94%E8%BC%83%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F&quot; title=&quot;8種類あるSVGスプライト それぞれの特徴を比較してみた - 週刊SVG&quot;&gt;ssvvgg.net/post/153900731865/8%E7%A8%AE%E9%A1%9E%E3%81%82%E3%82%8Bsvg%E3%82%B9%E3%83%97%E3%83%A9%E3%82%A4%E3%83%88-%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C%E3%81%AE%E7%89%B9%E5%BE%B4%E3%82%92%E6%AF%94%E8%BC%83%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;SVG&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SVGスプライトといわれるものがどうのようなものであるか、またその手法についてまとめられた記事&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;スライド、動画関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;yarn-vs.-npm@2-vs.-npm@3-//-speaker-deck&quot;&gt;yarn VS. npm@2 VS. npm@3 // Speaker Deck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/pine613/yarn-vs-npm-at-2-vs-npm-at-3&quot; title=&quot;yarn VS. npm@2 VS. npm@3 // Speaker Deck&quot;&gt;speakerdeck.com/pine613/yarn-vs-npm-at-2-vs-npm-at-3&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;presentation&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;npmとyarnの比較スライド。&lt;br&gt;
GitHub Star上位100を対象にインストール時間を比較し、yarnの方が常に早いという結果になったという話&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;dai-shi/es-beautifier:-ecmascript-beautifier-based-on-eslint&quot;&gt;dai-shi/es-beautifier: ECMAScript beautifier based on eslint&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dai-shi/es-beautifier&quot; title=&quot;dai-shi/es-beautifier: ECMAScript beautifier based on eslint&quot;&gt;github.com/dai-shi/es-beautifier&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ESLint&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ESLintを使ったJavaScriptのフォーマッター&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;gajus/babel-plugin-log-deprecated:-adds-a-console.warn-statement-to-the-functions-annotated-with-@deprecated-tag.&quot;&gt;gajus/babel-plugin-log-deprecated: Adds a console.warn statement to the functions annotated with @deprecated tag.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/gajus/babel-plugin-log-deprecated&quot; title=&quot;gajus/babel-plugin-log-deprecated: Adds a console.warn statement to the functions annotated with @deprecated tag.&quot;&gt;github.com/gajus/babel-plugin-log-deprecated&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;babel&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;JSDoc&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;JSDocの&lt;code&gt;@depreacted&lt;/code&gt;タグを&lt;code&gt;console.warn&lt;/code&gt;に変換するBabel plugin&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;wooorm/nspell:-📝-hunspell-compatible-spell-checker&quot;&gt;wooorm/nspell: 📝 Hunspell compatible spell-checker&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wooorm/nspell&quot; title=&quot;wooorm/nspell: 📝 Hunspell compatible spell-checker&quot;&gt;github.com/wooorm/nspell&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;スペルチェッカーの実装ライブラリ。&lt;br&gt;
hunspell形式の辞書をサポートしてる。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;razrfalcon/svgcleaner:-svgcleaner-could-help-you-to-clean-up-your-svg-files-from-the-unnecessary-data.&quot;&gt;RazrFalcon/svgcleaner: svgcleaner could help you to clean up your SVG files from the unnecessary data.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/RazrFalcon/svgcleaner&quot; title=&quot;RazrFalcon/svgcleaner: svgcleaner could help you to clean up your SVG files from the unnecessary data.&quot;&gt;github.com/RazrFalcon/svgcleaner&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;SVG&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;SVGから不要なデータを削除してファイルサイズを削減するツール。&lt;br&gt;
svgoに比べて高速に動作する&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;svelte-•-the-magical-disappearing-ui-framework&quot;&gt;Svelte • The magical disappearing UI framework&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://svelte.technology/&quot; title=&quot;Svelte • The magical disappearing UI framework&quot;&gt;svelte.technology/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vueなどに似た書き方をするコンパイル前提のUIフレームワーク。&lt;br&gt;
変換後はただのDOM APIを使ったJavaScriptになり、ランタイムとしてのライブラリ読み込みが不要となる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://svelte.technology/blog/frameworks-without-the-framework/&quot; title=&quot;Frameworks without the framework: why didn&amp;amp;amp;#39;t we think of this sooner? • Svelte&quot;&gt;Frameworks without the framework: why didn&amp;amp;#39;t we think of this sooner? • Svelte&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 09:55:00 +0900</pubDate>
        <link>https://jser.info/2016/12/06/ember.js-2.10-front-end-tooling-2016-svelte/</link>
        <guid isPermaLink="true">https://jser.info/2016/12/06/ember.js-2.10-front-end-tooling-2016-svelte/</guid>
        
        <category>Ember</category>
        
        <category>Tools</category>
        
        <category>Framework</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2016-11-29のJS: Node.js v7.2.0、Yarnでオフラインインストール</title>
        <description>&lt;p&gt;JSer.info #307 - &lt;a href=&quot;https://nodejs.org/en/blog/release/v7.2.0/&quot; title=&quot;Node v7.2.0&quot;&gt;Node v7.2.0&lt;/a&gt;がリリースされました。&lt;br&gt;
Windows 10ユーザー向けにはセキュリティ修正も含まれています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v7.2.0/&quot; title=&quot;Node v7.2.0 (Current) | Node.js&quot;&gt;Node v7.2.0 (Current) | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/blog/weekly-updates/weekly-update.2016-11-24/&quot; title=&quot;Weekly Update - November 24th, 2016 | Node.js&quot;&gt;Weekly Update - November 24th, 2016&lt;/a&gt;によると、Node.jsのコードカバレッジを見られる&lt;a href=&quot;https://coverage.nodejs.org/&quot; title=&quot;Node.js Nightly Code Coverage&quot;&gt;Node.js Nightly Code Coverage&lt;/a&gt;が追加されています。&lt;br&gt;
また、Node.js v7のベンチマークも含めた&lt;a href=&quot;https://benchmarking.nodejs.org/&quot; title=&quot;Node.js Benchmarks&quot;&gt;Node.js Benchmarks&lt;/a&gt;が公開されています。&lt;/p&gt;

&lt;p&gt;ベンチマークに興味がある人は&lt;a href=&quot;https://github.com/nodejs/benchmarking&quot; title=&quot;Benchmarking Work Group&quot;&gt;Benchmarking Work Group&lt;/a&gt;を見てみるといいかもしれません。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://yarnpkg.com/blog/2016/11/24/offline-mirror&quot; title=&quot;Running Yarn offline&quot;&gt;Running Yarn offline&lt;/a&gt;という記事では、Yarnを使ったオフラインインストールについて書かれています。&lt;/p&gt;

&lt;p&gt;Yarnでは&lt;code&gt;yarn.lock&lt;/code&gt;の&lt;code&gt;resolved&lt;/code&gt;フィールドで、そのモジュールの場所(URLやパス)を指定できます。つまり、この&lt;code&gt;resolved&lt;/code&gt;フィールドを相対パスにすれば、ローカルからモジュールを取ってきてオフラインインストールができる仕組みです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.yarnrc&lt;/code&gt;の&lt;code&gt;yarn-offline-mirror&lt;/code&gt;の設定で、オフラインミラー用のモジュールの保存先を指定できるので、これを利用してプロジェクトの下にモジュールのキャッシュを保存する手法について書かれています。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Many Facebook teams, including the React Native team, decided to check in their “Offline mirror”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;この記事で興味深いところは、FacebookではこのOffline mirrorをバージョン管理下に含めて利用している点です。&lt;/p&gt;

&lt;p&gt;最近iOS(CocoaPodsとCarthageというパッケージ管理ツール)でも同様の議論があったので、プロジェクトにおける依存モジュールの扱い方は変化してきているのかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://qiita.com/mono0926/items/636819c42e96a8c4e12d&quot; title=&quot;CocoaPods・Carthageでインストールした成果物はバージョン管理に含めるべきか？ - Qiita&quot;&gt;CocoaPods・Carthageでインストールした成果物はバージョン管理に含めるべきか？ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;お知らせ&quot;&gt;お知らせ&lt;/h2&gt;

&lt;p&gt;JSer.info 6周年と300回目記念イベントを2017年1月15日(日)にやる予定です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot; title=&quot;JSer.info 6周年 &amp;amp;amp;&amp;amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&quot;&gt;JSer.info 6周年 &amp;amp;&amp;amp; 300回目記念イベント @ 1月15日(日) · Issue #89 · jser/jser.info&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jser.connpass.com/event/24202/&quot; title=&quot;JSer.info 5周年記念イベント&quot;&gt;JSer.info 5周年記念イベント&lt;/a&gt;のようなイベントになると思いますが、まだ何やるかがしっかり決まってはいません。&lt;/p&gt;

&lt;p&gt;是非こういうことをやりたいということがあればIssueなどに書き込んでください。&lt;/p&gt;

&lt;p&gt;例) 死にゆくFlashに関する話をしたい など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jser/jser.info/issues/89&quot;&gt;https://github.com/jser/jser.info/issues/89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;こういう発表したい事前予告もありです&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;イベントページ(まだない)での募集開始は12月中旬ぐらいを予定しています。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-v2.1.0-·-vuejs/vue&quot;&gt;Release v2.1.0 · vuejs/vue&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/vuejs/vue/releases/tag/v2.1.0&quot; title=&quot;Release v2.1.0 · vuejs/vue&quot;&gt;github.com/vuejs/vue/releases/tag/v2.1.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vue.js 2.1.0リリース。&lt;br&gt;
Scoped Slots、&lt;code&gt;v-else-if&lt;/code&gt;、&lt;code&gt;dist&lt;/code&gt;以下のファイルの変更、JSX対応の改善、サーバサイドレンダリングの際に&lt;code&gt;process.env.VUE_ENV=server&lt;/code&gt;は不要になるなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/yyx990803/faebe22e8763f5b17572b35ed96f52fe&quot; title=&quot;2.1.0.md&quot;&gt;2.1.0.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;大変お待たせしました。Vue.js 2.0 公式ドキュメントの日本語サイトリリースしました！最新バージョン 2.1 まで対応しています。今回の翻訳プロジェクトにご協力頂いた方には大変感謝です！ありがとうございました！ &lt;a href=&quot;https://t.co/nCleWsMtft&quot;&gt;https://t.co/nCleWsMtft&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/vuejs?src=hash&quot;&gt;#vuejs&lt;/a&gt;&lt;/p&gt;&amp;mdash; 🐤kazuya kawaguchi🐤 (@kazu_pon) &lt;a href=&quot;https://twitter.com/kazu_pon/status/801529603223273472&quot;&gt;2016年11月23日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;hr&gt;

&lt;h2 id=&quot;eslint-v3.11.0-released---eslint---pluggable-javascript-linter&quot;&gt;ESLint v3.11.0 released - ESLint - Pluggable JavaScript linter&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://eslint.org/blog/2016/11/eslint-v3.11.0-released&quot; title=&quot;ESLint v3.11.0 released - ESLint - Pluggable JavaScript linter&quot;&gt;eslint.org/blog/2016/11/eslint-v3.11.0-released&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ESLint&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ESLint v3.11.0リリース。&lt;br&gt;
&lt;code&gt;capitalized-comments&lt;/code&gt;、&lt;code&gt;require-await&lt;/code&gt;のルールを追加など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;node-v7.2.0-(current)-|-node.js&quot;&gt;Node v7.2.0 (Current) | Node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nodejs.org/en/blog/release/v7.2.0/&quot; title=&quot;Node v7.2.0 (Current) | Node.js&quot;&gt;nodejs.org/en/blog/release/v7.2.0/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;security&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node v7.2.0リリース。&lt;br&gt;
Windows向けのセキュリティリリース、&lt;code&gt;process.memoryUsage().external&lt;/code&gt;の追加など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/blog/weekly-updates/weekly-update.2016-11-24/&quot; title=&quot;Weekly Update - November 24th, 2016 | Node.js&quot;&gt;Weekly Update - November 24th, 2016 | Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-·-riot.js&quot;&gt;Release notes · Riot.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://riotjs.com/release-notes/#november-22-2016&quot; title=&quot;Release notes · Riot.js&quot;&gt;riotjs.com/release-notes/#november-22-2016&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Riot.js 3.0リリース&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/riot/riot/issues/1694&quot; title=&quot;Riot 3.0.0 roadmap · Issue #1694 · riot/riot&quot;&gt;Riot 3.0.0 roadmap · Issue #1694 · riot/riot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;running-yarn-offline-|-yarn&quot;&gt;Running Yarn offline | Yarn&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://yarnpkg.com/blog/2016/11/24/offline-mirror&quot; title=&quot; Running Yarn offline | Yarn&quot;&gt;yarnpkg.com/blog/2016/11/24/offline-mirror&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;npm&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;yarnをオフラインで使う方法や、オフラインのミラーをリポジトリに含める方法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;how-css-pseudo-classes-work,-explained-with-code-and-lots-of-diagrams&quot;&gt;How CSS pseudo-classes work, explained with code and lots of diagrams&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.freecodecamp.com/explained-css-pseudo-classes-cef3c3177361&quot; title=&quot;How CSS pseudo-classes work, explained with code and lots of diagrams&quot;&gt;medium.freecodecamp.com/explained-css-pseudo-classes-cef3c3177361&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;:*-of-type&lt;/code&gt;と&lt;code&gt;:*-child&lt;/code&gt;などの擬似クラスについての分かりやすい図解&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;es6-iterators-and-generators-in-practice-–-zsolt-nagy&quot;&gt;ES6 Iterators and Generators in Practice – Zsolt Nagy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zsoltnagy.eu/es6-iterators-and-generators-in-practice/&quot; title=&quot;ES6 Iterators and Generators in Practice – Zsolt Nagy&quot;&gt;www.zsoltnagy.eu/es6-iterators-and-generators-in-practice/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Iterator、Iterable、Generatorについて。&lt;br&gt;
サンプルコード中心でどのような挙動になるかを解説してる&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;dassur.ma-–-how-to-read-web-specs-part-iia-–-or:-ecmascript-symbols&quot;&gt;DasSur.ma – How to read web specs Part IIa – Or: ECMAScript Symbols&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dassur.ma/things/reading-specs-2/&quot; title=&quot;DasSur.ma – How to read web specs Part IIa – Or: ECMAScript Symbols&quot;&gt;dassur.ma/things/reading-specs-2/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;ECMAScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;spec&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ECMAScriptの仕様をどうやって読んでいくかについて。&lt;br&gt;
&lt;code&gt;@@iterator&lt;/code&gt;とは何か?というところから&lt;code&gt;Symbol&lt;/code&gt;の仕様を見ていく話&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;typescript-2.0:-built-in-type-declarations-|-marius-schulz&quot;&gt;TypeScript 2.0: Built-In Type Declarations | Marius Schulz&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.mariusschulz.com/2016/11/25/typescript-2-0-built-in-type-declarations&quot; title=&quot;TypeScript 2.0: Built-In Type Declarations | Marius Schulz&quot;&gt;blog.mariusschulz.com/2016/11/25/typescript-2-0-built-in-type-declarations&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;TypeScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;TypeScript 2.0のBuilt-In Typeについて。&lt;br&gt;
&lt;code&gt;--lib&lt;/code&gt;オプションで含めるビルトインのlibを指定できる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot; title=&quot;Compiler Options · TypeScript&quot;&gt;Compiler Options · TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;understanding-javascript-micro-templating-–-medium&quot;&gt;Understanding JavaScript Micro-Templating – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@zfrisch/understanding-javascript-micro-templating-f37a37b3b40e&quot; title=&quot;Understanding JavaScript Micro-Templating – Medium&quot;&gt;medium.com/@zfrisch/understanding-javascript-micro-templating-f37a37b3b40e&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;template&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;John Resig製の140bytesで動くMicro Templatingがどのような仕組みで動いているのかを見ていく記事。&lt;br&gt;
Functionコンストラクタ、正規表現など構成要素を丁寧に解説してる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ejohn.org/blog/javascript-micro-templating/&quot; title=&quot;John Resig - JavaScript Micro-Templating&quot;&gt;John Resig - JavaScript Micro-Templating&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/Fedia/20d41d8533e0903f0123&quot; title=&quot;John Resig&amp;amp;amp;#39;s Micro-Templating in 140 bytes&quot;&gt;John Resig&amp;#39;s Micro-Templating in 140 bytes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;the-numbers-on-webpack-1-vs-2-–-medium&quot;&gt;The numbers on Webpack 1 vs 2 – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@u_glow/the-numbers-on-webpack-1-vs-2-7f457bb4658c&quot; title=&quot;The numbers on Webpack 1 vs 2 – Medium&quot;&gt;medium.com/@u_glow/the-numbers-on-webpack-1-vs-2-7f457bb4658c&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;webpack 1.xと2.0βのビルドサイズやビルド時間(prod/dev)の比較&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;advanced-data-tables-in-react&quot;&gt;Advanced Data Tables in React&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://techblog.commercetools.com/advanced-data-tables-in-react-dbe33f8345ab&quot; title=&quot;Advanced Data Tables in React&quot;&gt;techblog.commercetools.com/advanced-data-tables-in-react-dbe33f8345ab&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Reactのgridライブラリの比較まとめ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;an-introduction-to-mo.js-|-css-tricks&quot;&gt;An Introduction to mo.js | CSS-Tricks&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://css-tricks.com/introduction-mo-js/&quot; title=&quot;An Introduction to mo.js | CSS-Tricks&quot;&gt;css-tricks.com/introduction-mo-js/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;animation&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;宣言的なアニメーションライブラリであるmo.jsについてのチュートリアル&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;katatema.js---✘╹◡╹✘&quot;&gt;katatema.js - ✘╹◡╹✘&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://r7kamura.hatenablog.com/entry/2016/11/24/030101&quot; title=&quot;katatema.js - ✘╹◡╹✘&quot;&gt;r7kamura.hatenablog.com/entry/2016/11/24/030101&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;webpack&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;HTML&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Next.jsみたいな形でディレクトリにReactのコンポーネントを置くとHTMLにそれぞれ変換できるツール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/r7kamura/katatema&quot; title=&quot;r7kamura/katatema: A handy static site generator using React.js&quot;&gt;r7kamura/katatema: A handy static site generator using React.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;スライド、動画関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;react-at-product-hunt-//-speaker-deck&quot;&gt;React at Product Hunt // Speaker Deck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/rstankov/react-at-product-hunt&quot; title=&quot;React at Product Hunt // Speaker Deck&quot;&gt;speakerdeck.com/rstankov/react-at-product-hunt&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;スライド&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ProductHuntのJavaScript変遷についてのスライド。&lt;br&gt;
jQuery -&amp;gt; Backbone -&amp;gt; React + Redux。&lt;br&gt;
Duxyを使ったRest APIの操作についてなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/producthunt/duxy&quot; title=&quot;producthunt/duxy: RESTful resources&quot;&gt;producthunt/duxy: RESTful resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;azat-co/you-dont-know-node:-you-don&amp;#x27;t-know-node.js&quot;&gt;azat-co/you-dont-know-node: You Don&amp;#x27;t Know Node.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/azat-co/you-dont-know-node&quot; title=&quot;azat-co/you-dont-know-node: You Don&amp;#39;t Know Node.js&quot;&gt;github.com/azat-co/you-dont-know-node&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;tutorial&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Node.jsとはどのような特徴を持っているかという入門者向けの紹介。&lt;br&gt;
非同期I/O、Stream、エラーハンドリング、ネイティブモジュールについて&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;サイト、サービス、ドキュメント&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;css-reference---a-free-visual-guide-to-the-most-popular-css-properties.&quot;&gt;CSS Reference - A free visual guide to the most popular CSS properties.&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://cssreference.io/&quot; title=&quot;CSS Reference - A free visual guide to the most popular CSS properties.&quot;&gt;cssreference.io/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;リファレンス&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;CSSリファレンスサイト。&lt;br&gt;
それぞれのプロパティを当てた結果を表示してくれている&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;feature.js&quot;&gt;Feature.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://featurejs.com/&quot; title=&quot;Feature.js&quot;&gt;featurejs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Modernizrのように色々な機能が利用できるかを一括で判定するライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;reframe.js&quot;&gt;Reframe.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dollarshaveclub.github.io/reframe.js&quot; title=&quot;Reframe.js&quot;&gt;dollarshaveclub.github.io/reframe.js&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;iframeなどの埋め込み要素をレスポンシブルに扱うライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;immutable-css&quot;&gt;immutable-css&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://immutablecss.com/&quot; title=&quot;immutable-css&quot;&gt;immutablecss.com/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;CSS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A CSS linter for immutable selectors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;セレクタのoverrideをチェックするLintツール&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;nuxt/nuxt.js:-a-minimalistic-framework-for-server-rendered-vue.js-applications-(inspired-by-next.js)&quot;&gt;nuxt/nuxt.js: A minimalistic framework for server-rendered Vue.js applications (inspired by Next.js)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nuxt/nuxt.js&quot; title=&quot;nuxt/nuxt.js: A minimalistic framework for server-rendered Vue.js applications (inspired by Next.js)&quot;&gt;github.com/nuxt/nuxt.js&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Next.jsインスパイアのVue.js向けサーバサイドレンダリングフレームワーク&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 29 Nov 2016 09:37:00 +0900</pubDate>
        <link>https://jser.info/2016/11/29/node.js-v7.2.0-yarn/</link>
        <guid isPermaLink="true">https://jser.info/2016/11/29/node.js-v7.2.0-yarn/</guid>
        
        <category>Node</category>
        
        <category>Yarn</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
      <item>
        <title>2016-11-22のJS: Firefox 50、React v15.4.0、Custom Element v1</title>
        <description>&lt;p&gt;JSer.info #306 - &lt;a href=&quot;https://www.mozilla.jp/firefox/50.0/releasenotes/&quot; title=&quot;Firefox 50&quot;&gt;Firefox 50&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mozilla.jp/firefox/50.0/releasenotes/&quot;&gt;Firefox 50.0 リリースノート&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/Firefox/Releases/50&quot;&gt;Firefox 50 for developers - Mozilla | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fxsitecompat.com/ja/versions/50/&quot;&gt;Firefox 50 サイト互換性情報 | Firefox サイト互換性情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firefox 50では、&lt;code&gt;Symbol.hasInstance&lt;/code&gt;の実装、コンソールがSource Mapを解釈するようになり、&lt;code&gt;addEventListener&lt;/code&gt;が&lt;code&gt;{ once }&lt;/code&gt;オプションをサポートしました。&lt;br&gt;
DOMにおいては、&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/NodeList&quot; title=&quot;NodeList&quot;&gt;NodeList&lt;/a&gt;や&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/DOMTokenList&quot; title=&quot;DOMTokenList&quot;&gt;DOMTokenList&lt;/a&gt;がIterableとなったため、次のように&lt;code&gt;NodeList#querySelectorAll&lt;/code&gt;の結果に対して&lt;code&gt;forEach&lt;/code&gt;メソッドなどが利用できます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また、セキュリティ面では&lt;code&gt;__Secure-&lt;/code&gt;などの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie&quot; title=&quot;Cookie prefixes&quot;&gt;Cookie prefixes&lt;/a&gt;、&lt;code&gt;X-Content-Type-Options: nosniff&lt;/code&gt;に対応しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://mozsec-jp.hatenablog.jp/entry/2016/08/29/222740&quot;&gt;【翻訳】Firefox における MIME Confusion Attack の防止 - Mozilla Security Blog 日本語版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.mozilla.org/security/2016/08/26/mitigating-mime-confusion-attacks-in-firefox/&quot;&gt;Mitigating MIME Confusion Attacks in Firefox | Mozilla Security Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html&quot; title=&quot;React v15.4.0&quot;&gt;React v15.4.0&lt;/a&gt;がリリースされました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html&quot; title=&quot;React v15.4.0 - React Blog&quot;&gt;React v15.4.0 - React Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html#two-packages-react-and-react-dom&quot; title=&quot;React v0.14&quot;&gt;React v0.14&lt;/a&gt;で&lt;code&gt;react&lt;/code&gt;と&lt;code&gt;react-dom&lt;/code&gt;にパッケージが分割されていましたが、内部的にはReact DOMの実装が&lt;code&gt;react&lt;/code&gt;パッケージにも含まれていました。&lt;br&gt;
これに起因する&lt;a href=&quot;https://github.com/facebook/react/issues/7386&quot;&gt;問題&lt;/a&gt;があったため、React v15.4.0では内部的に残っていたReact DOMの実装を&lt;code&gt;react&lt;/code&gt;パッケージから削除されました。&lt;/p&gt;

&lt;p&gt;この変更に影響を受けるのは、&lt;code&gt;require(&amp;quot;react/lib/merge&amp;quot;)&lt;/code&gt;のように直接ReactのPrivate APIを利用していた場合のみです。&lt;br&gt;
この&lt;a href=&quot;https://nodejs.org/api/modules.html#modules_addenda_package_manager_tips&quot; title=&quot;require()&quot;&gt;require()&lt;/a&gt;を使った直接参照は、React 0.12頃から非推奨となっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/flux/issues/77&quot;&gt;Dont use require(&amp;#39;react/lib/*&amp;#39;) in examples &amp;amp; docs · Issue #77 · facebook/flux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/2251&quot;&gt;Allow internal components to be used in the browser version · Issue #2251 · facebook/react&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/pull/2317&quot;&gt;Ship merge, mergeInto, copyProperties to npm by zpao · Pull Request #2317 · facebook/react&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/facebook/react/issues/6460&quot; title=&quot;Rename react/lib/* to react/private/* · Issue #6460 · facebook/react&quot;&gt;Rename react/lib/* to react/private/* · Issue #6460 · facebook/react&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、React v15.4.0では&lt;code&gt;?react_perf&lt;/code&gt;をURLにつけることにより、User Timing APIでのパフォーマンス計測ができるようになっています。&lt;br&gt;
&lt;code&gt;performance.mark&lt;/code&gt;や&lt;code&gt;performance.measure&lt;/code&gt;を利用し実現しているので、次の記事を見てみると面白いかもしれません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://efcl.info/2016/08/15/performance.mark/&quot; title=&quot;performance.markでパフォーマンス計測する | Web Scratch&quot;&gt;performance.markでパフォーマンス計測する | Web Scratch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7027/introducing-custom-elements/&quot; title=&quot;Introducing Custom Elements | WebKit&quot;&gt;Introducing Custom Elements | WebKit&lt;/a&gt;では、WebKitのCustom Elements実装者によるCustom Elements(v1)の解説が書かれています。&lt;/p&gt;

&lt;p&gt;Custom Elementsのライフサイクルの話などが詳しく書かれているので、興味がある人は読んでみるといいです。&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ヘッドライン&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;firefox-50.0-リリースノート&quot;&gt;Firefox 50.0 リリースノート&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mozilla.jp/firefox/50.0/releasenotes/&quot; title=&quot;Firefox 50.0 リリースノート&quot;&gt;www.mozilla.jp/firefox/50.0/releasenotes/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Firefox 50リリース。&lt;br&gt;
WebM EMEのサポート、&lt;code&gt;Symbol.hasInstance&lt;/code&gt;の実装、コンソールがSource Mapを解釈するように。&lt;br&gt;
&lt;code&gt;addEventListener&lt;/code&gt;が&lt;code&gt;once&lt;/code&gt;オプション、&lt;code&gt;X-Content-Type-Options&lt;/code&gt;ヘッダーのサポート、など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ja/Firefox/Releases/50&quot; title=&quot;Firefox 50 for developers - Mozilla | MDN&quot;&gt;Firefox 50 for developers - Mozilla | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fxsitecompat.com/ja/versions/50/&quot; title=&quot;Firefox 50 サイト互換性情報 | Firefox サイト互換性情報&quot;&gt;Firefox 50 サイト互換性情報 | Firefox サイト互換性情報&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-notes-for-safari-technology-preview-18-|-webkit&quot;&gt;Release Notes for Safari Technology Preview 18 | WebKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7078/release-notes-for-safari-technology-preview-18/&quot; title=&quot;Release Notes for Safari Technology Preview 18 | WebKit&quot;&gt;webkit.org/blog/7078/release-notes-for-safari-technology-preview-18/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;webkit&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Safari Technology Preview Release 18リリース。&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;react-v15.4.0---react-blog&quot;&gt;React v15.4.0 - React Blog&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html&quot; title=&quot;React v15.4.0 - React Blog&quot;&gt;facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React v15.4.0リリース。&lt;br&gt;
内部的に存在していた &lt;code&gt;react/lib/*&lt;/code&gt; のPrivate APIを削除、&lt;code&gt;?react_perf&lt;/code&gt;を付けることでUser Timingベースのプロファイリングを取れるようになるなど&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;6.19.0-released-·-babel&quot;&gt;6.19.0 Released · Babel&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://babeljs.io/blog/2016/11/16/6.19.0&quot; title=&quot;6.19.0 Released · Babel&quot;&gt;babeljs.io/blog/2016/11/16/6.19.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;babel&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Babel v6.19.0リリース。&lt;br&gt;
babel-plugin-transform-object-rest-spreadが単独のPluginとして動くように。&lt;br&gt;
stage-2 presetに&lt;code&gt;babel-plugin-syntax-dynamic-import&lt;/code&gt;を追加など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://babeljs.io/docs/plugins/transform-object-rest-spread/&quot; title=&quot;Object rest spread transform · Babel&quot;&gt;Object rest spread transform · Babel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-0.17.0-·-avajs/ava&quot;&gt;Release 0.17.0 · avajs/ava&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/avajs/ava/releases/tag/v0.17.0&quot; title=&quot;Release 0.17.0 · avajs/ava&quot;&gt;github.com/avajs/ava/releases/tag/v0.17.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;node.js&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;testing&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AVA 0.17.0リリース。&lt;br&gt;
&lt;code&gt;process.cws()&lt;/code&gt;を&lt;code&gt;package.json&lt;/code&gt;と同じディレクトリに変更、Node.js v4&amp;gt;=のみのサポート、&lt;code&gt;--require&lt;/code&gt; CLIオプションの削除、&lt;code&gt;karma-ava&lt;/code&gt;のサポートなど&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/avajs/ava-codemods#migrating-to-ava&quot; title=&quot;avajs/ava-codemods: Codemods for AVA&quot;&gt;avajs/ava-codemods: Codemods for AVA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;release-fetch-2.0.0-·-github/fetch&quot;&gt;Release fetch 2.0.0 · github/fetch&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/github/fetch/releases/tag/v2.0.0&quot; title=&quot;Release fetch 2.0.0 · github/fetch&quot;&gt;github.com/github/fetch/releases/tag/v2.0.0&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;github&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Fetch APIのpolyfillライブラリである&lt;code&gt;fetch&lt;/code&gt; 2.0.0リリース。&lt;br&gt;
&lt;code&gt;Header.get()&lt;/code&gt;の挙動変更、&lt;code&gt;Headers.getAll()&lt;/code&gt;の削除など&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;angular-2.2.0-now-available&quot;&gt;Angular 2.2.0 Now Available&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://angularjs.blogspot.com/2016/11/angular-220-now-available.html&quot; title=&quot;Angular 2.2.0 Now Available&quot;&gt;angularjs.blogspot.com/2016/11/angular-220-now-available.html&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;AngularJS&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;AngularJS 2.2.0リリース。&lt;br&gt;
&lt;code&gt;@anguar/upgrade&lt;/code&gt;を使い1.xと2.xを共存させる場合にRouterでどちらも扱えるようにする仕組みの追加、JavaScriptで使う場合のガイドの追加など&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/docs/ts/latest/cookbook/ts-to-js.html&quot; title=&quot;TypeScript to JavaScript - ts - COOKBOOK&quot;&gt;TypeScript to JavaScript - ts - COOKBOOK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vsavkin.com/migrating-angular-1-applications-to-angular-2-in-5-simple-steps-40621800a25b&quot; title=&quot;Migrating Angular 1 Applications to Angular 2 in 5 Simple Steps&quot;&gt;Migrating Angular 1 Applications to Angular 2 in 5 Simple Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;these-weeks-in-firefox:-issue-5-|-firefox-nightly-news&quot;&gt;These Weeks in Firefox: Issue 5 | Firefox Nightly News&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.nightly.mozilla.org/2016/11/16/these-weeks-in-firefox-issue-5/&quot; title=&quot;These Weeks in Firefox: Issue 5 | Firefox Nightly News&quot;&gt;blog.nightly.mozilla.org/2016/11/16/these-weeks-in-firefox-issue-5/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;firefox&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;ReleaseNote&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Firefox Nightly 52における変更点のハイライト。&lt;br&gt;
async/awaitの対応、ネットワークのスロットリングツールの追加、&lt;code&gt;&amp;lt;input type=&amp;quot;time&amp;quot;&amp;gt;&lt;/code&gt;のUI改善など&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;アーティクル&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;introducing-custom-elements-|-webkit&quot;&gt;Introducing Custom Elements | WebKit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://webkit.org/blog/7027/introducing-custom-elements/&quot; title=&quot;Introducing Custom Elements | WebKit&quot;&gt;webkit.org/blog/7027/introducing-custom-elements/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;WebComponents&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Custom Elementについて。&lt;br&gt;
HTMLElementのサブクラスでの定義、ライフサイクルのコールバックイベントは同期的に呼ばれる点について。&lt;br&gt;
また、非同期でCustom Elementが&lt;code&gt;deinfe&lt;/code&gt;されたことを&lt;code&gt;whenDefined&lt;/code&gt;で検知する方法について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;how-to-win-in-web-framework-benchmarks-–-medium&quot;&gt;How to win in Web Framework Benchmarks – Medium&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@localvoid/how-to-win-in-web-framework-benchmarks-8bc31af76ce7&quot; title=&quot;How to win in Web Framework Benchmarks – Medium&quot;&gt;medium.com/@localvoid/how-to-win-in-web-framework-benchmarks-8bc31af76ce7&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;DOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;VirtualDOM&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;benchmark&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;kiviというReactのようなUIライブラリを作っていくにあたりベンチマークを見てどのような最適化をしていくかという話。&lt;br&gt;
色々なDOMライブラリのベンチマークを試し、どのような点を改善すれば結果がよくなったかという話&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/localvoid/kivi&quot; title=&quot;localvoid/kivi: Javascript (TypeScript) library for building web user interfaces&quot;&gt;localvoid/kivi: Javascript (TypeScript) library for building web user interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;choosing-ember-over-react-in-2016&quot;&gt;Choosing Ember over React in 2016&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.instant2fa.com/choosing-ember-over-react-in-2016-41a2e7fd341&quot; title=&quot;Choosing Ember over React in 2016&quot;&gt;blog.instant2fa.com/choosing-ember-over-react-in-2016-41a2e7fd341&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Instant 2FAというサービスをEmberで作ってみて良かったところと良くなかったところについて。&lt;br&gt;
&lt;code&gt;ember-cli&lt;/code&gt;について&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;for..in-versus-for..of-loops&quot;&gt;for..in versus for..of Loops&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://bitsofco.de/for-in-vs-for-of/&quot; title=&quot;for..in versus for..of Loops&quot;&gt;bitsofco.de/for-in-vs-for-of/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;for...of&lt;/code&gt;と&lt;code&gt;for...in&lt;/code&gt;の違いについて&lt;/p&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;スライド、動画関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;react-with-reduxによる大規模商用サービスの開発-/-nodefest2016-//-speaker-deck&quot;&gt;React with Reduxによる大規模商用サービスの開発 / nodefest2016 // Speaker Deck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/yoshidan/nodefest2016&quot; title=&quot;React with Reduxによる大規模商用サービスの開発 / nodefest2016 // Speaker Deck&quot;&gt;speakerdeck.com/yoshidan/nodefest2016&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;redux&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;スライド&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React + Reduxにおける注意点について。&lt;br&gt;
画面遷移とJavaScriptファイルの分割、サーバサイドレンダリングの手法とコストについて&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://engineer.recruit-lifestyle.co.jp/techblog/2016-11-16-isomorphic-javascript/&quot; title=&quot;React + Reduxで作ったIsomorphic(Universal) JSなサービス開発の裏側 - Tech Blog - Recruit Lifestyle Engineer&quot;&gt;React + Reduxで作ったIsomorphic(Universal) JSなサービス開発の裏側 - Tech Blog - Recruit Lifestyle Engineer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;💓-vue.js&quot;&gt;💓 Vue.js&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://nakajmg.github.io/s/161119-vue/&quot; title=&quot;💓 Vue.js&quot;&gt;nakajmg.github.io/s/161119-vue/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;スライド&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vue.jsについてのスライド。&lt;br&gt;
コンソールにTranscriptが出る。&lt;br&gt;
Vue.js 2.xの特徴やエコシステム、ツールなどについて&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;about_hiroppyさんの「ecmascript」-/-about_hiroppy-さん---ニコナレ&quot;&gt;about_hiroppyさんの「ECMAScript」 / about_hiroppy さん - ニコナレ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://niconare.nicovideo.jp/watch/kn1937&quot; title=&quot;about\_hiroppyさんの「ECMAScript」 / about\_hiroppy さん - ニコナレ&quot;&gt;niconare.nicovideo.jp/watch/kn1937&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;JavaScript&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;スライド&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;ECMAScriptの策定プロセスとES2016/2017について&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://niconare.nicovideo.jp/watch/kn1936&quot; title=&quot;ECMAScript / about\_hiroppy さん - ニコナレ&quot;&gt;ECMAScript / about_hiroppy さん - ニコナレ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h1 class=&quot;site-genre&quot;&gt;ソフトウェア、ツール、ライブラリ関係&lt;/h1&gt;

&lt;hr&gt;

&lt;h2 id=&quot;paulirish/pwmetrics:-progressive-web-metrics-at-your-fingertipz&quot;&gt;paulirish/pwmetrics: Progressive web metrics at your fingertipz&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/paulirish/pwmetrics&quot; title=&quot;paulirish/pwmetrics: Progressive web metrics at your fingertipz&quot;&gt;github.com/paulirish/pwmetrics&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;performance&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;Tools&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;lighthouseを使ったパフォーマンスメトリクスの可視化ツール&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/GoogleChrome/lighthouse/&quot; title=&quot;GoogleChrome/lighthouse: auditing and performance metrics for Progressive Web Apps&quot;&gt;GoogleChrome/lighthouse: auditing and performance metrics for Progressive Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h2 id=&quot;dylanb/react-axe:-accessibility-auditing-for-react.js-applications&quot;&gt;dylanb/react-axe: Accessibility auditing for React.js applications&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dylanb/react-axe&quot; title=&quot;dylanb/react-axe: Accessibility auditing for React.js applications&quot;&gt;github.com/dylanb/react-axe&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;accessibility&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;axe-coreをつかったアクセシビリティチェックを行うReactライブラリ&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;victory&quot;&gt;Victory&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://formidable.com/open-source/victory/&quot; title=&quot;Victory&quot;&gt;formidable.com/open-source/victory/&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;jser-tags jser-tag-icon&quot;&gt;&lt;span class=&quot;jser-tag&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;グラフ&lt;/span&gt; &lt;span class=&quot;jser-tag&quot;&gt;library&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;React Componentとしてグラフを書く事ができるライブラリ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://formidable.com/blog/2016/11/09/flexible-charting-in-react-with-victory/&quot; title=&quot;Flexible Charting in React with Victory (and Introducing FormidableCharts) | Formidable&quot;&gt;Flexible Charting in React with Victory (and Introducing FormidableCharts) | Formidable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 22 Nov 2016 10:06:00 +0900</pubDate>
        <link>https://jser.info/2016/11/22/firefox-50-react-v15.4.0-custom-element-v1/</link>
        <guid isPermaLink="true">https://jser.info/2016/11/22/firefox-50-react-v15.4.0-custom-element-v1/</guid>
        
        <category>Firefox</category>
        
        <category>React</category>
        
        <category>WebKit</category>
        
        <category>WebComponents</category>
        
        
        <category>_i18n</category>
        
        <category>ja</category>
        
        <category>jser</category>
        
      </item>
    
  </channel>
</rss>
